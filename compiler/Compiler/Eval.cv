// Copyright (c) 2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Bytecode_Gen, CEI, Compiler_Vars, CV_Parser, IModule_Gen, ITree, Strings, Targets::Thirty_Two_Bit, Tokenizer, VM




class _Eval_Compiler:

	func init(str, vars, includes):
	
		self._str := str
		self._vars := vars
		
		self.bootstrap := 0
		self.includes := includes
		self.src_path := "<eval>"
		self.module_id := Strings::format(Compiler_Vars::UNIQUE_EVAL_NAME_TEMPLATE, CEI::fresh_name())
		self.target := Thirty_Two_Bit



	func eval():
		
		self.tokenizer := Tokenizer::Tokenizer.new()
		parse_tree := CV_Parser::parse_expr(self._str)

		expr := IModule_Gen::IModule_Gen.new().generate(parse_tree)
		
		eval_name := CEI::fresh_name()
		
		dummy_func := ITree::IFunc_Def.new(0, eval_name, [], null, [], [], ITree::IExpr_Block.new([ITree::IReturn.new(expr, [])], []), [])
		dummy_definitions := [ITree::IAssignment.new(ITree::STD_ASSIGN, [ITree::IVar.new(eval_name, [])], dummy_func, [])]
		dummy_imodule := ITree::IModule.new(eval_name, dummy_definitions, [])
		
		bytecode := Bytecode_Gen::Bytecode_Gen.new().generate(dummy_imodule, self.target).serialize()
		
		module_identifiers := VM::add_modules([bytecode])
		module := VM::import_module(module_identifiers[0])
		return module.get_def(eval_name)()




func eval(str, vars := Dict{}, includes := []):

	compiler := _Eval_Compiler.new(str, vars, includes)
	Compiler_Vars::push_compiler(compiler)
	result := compiler.eval()
	Compiler_Vars::pop_compiler()

	return result
