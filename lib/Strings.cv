// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Builtins, C_Strings, Exceptions, Functional, Maths, Sys




func format(format, *args):

	str := ""

	i := 0
	j := 0
	while i < format.len():
		if format[i] == "%" & i + 1 < format.len():
			if format[i + 1] == "%":
				str += format[i]
				i += 2
			else:
				if j == args.len():
					raise Exceptions::Parameters_Exception.new("Too few parameters passed for format string.")
				if format[i + 1] == "s":
					if not Builtins::String.conformed_by(args[j]):
						raise Exceptions::Type_Exception.new(Builtins::String, args[j], "parameter " + (j + 2).to_str())
					str += args[j]
					i += 2
					j += 1
				elif format[i + 1] == "d":
					if not Builtins::Int.conformed_by(args[j]):
						raise Exceptions::Type_Exception.new(Builtins::Int, args[j], "parameter " + (j + 2).to_str())
					str += args[j].to_str()
					i += 2
					j += 1
				else:
					raise Exceptions::Exception("Unknown identifier '" + format[i + 1] + "'")
		else:
			str += format[i]
			i += 1
	if j < args.len():
		raise Exceptions::Parameters_Exception.new("Too many parameters passed.")
	
	return str



func join(list, separator):

	return C_Strings::join(list, separator)



func split(str, seperator):

	split_str := []
	i := 0
	for j := str.find_index(seperator):
		split_str.append(str[i : j])
		i := j + seperator.len()
	if i < str.len():
		split_str.append(str[i : ])

	return split_str



//
// Returns the Longest Common Prefix among a list of strings.
//

func lcp(strings):

	if strings.len() == 0:
		return ""

	i := Maths::min.apply(Functional::map(func (x) {
		return x.len()
	}, strings))
	
	while i > 0:
		prefix := strings[0][ : i]
		j := 1
		while j < strings.len():
			if not strings[j].prefixed_by(prefix):
				break
			j += 1
		exhausted:
			return prefix
		
		i -= 1
	
	return ""
