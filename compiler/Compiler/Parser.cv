// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import File, Strings, Sys
import CPK::Earley::Grammar, CPK::Earley, CPK::Tokens, CPK::Tree
import Core, Tokenizer



GRAMMAR := """
top_level ::= defn ( "NEWLINE" defn )*
          ::=


defn  ::= class_defn
      ::= func_defn
      ::= import
      ::= name ( "," name )* ":=" expr
      ::= splice
	  ::= insert


name ::= "ID"
     ::= "&" "ID"
     ::= splice
     ::= insert


import      ::= "IMPORT" import_name import_as ( "," import_name import_as )*
import_name ::= "ID" ( "::" "ID" )*
import_as   ::= "AS" "ID"
            ::=


class_defn       ::= "CLASS" class_name class_supers class_metaclass ":" "INDENT" class_fields "DEDENT"
class_name      ::= "ID"
                ::= splice
				::= insert
				::=
class_supers    ::= "(" expr ( "," expr )* ")"
                ::=
class_metaclass ::= "METACLASS" expr
                ::=
class_fields    ::= class_field ( "NEWLINE" class_field )*
class_field     ::= class_defn
                ::= func_defn
                ::= name ":=" expr
                ::= splice
				::= insert
                ::= "PASS"

func_defn            ::= func_type func_name "(" func_params ")" ":" "INDENT" func_decls expr_body "DEDENT"
                    ::= func_type func_name "(" func_params ")" "{" "INDENT" func_decls expr_body "DEDENT" "NEWLINE" "}"
                    ::= func_type func_name "(" func_params ")" "{" expr "}"
func_type           ::= "FUNC"
                    ::= "BOUND_FUNC"
                    ::= "UNBOUND_FUNC"
func_name           ::= name
                    ::= "+"
                    ::= "-"
                    ::= "/"
                    ::= "*"
                    ::= "<"
                    ::= ">"
                    ::= "=="
                    ::= "!="
                    ::= ">="
                    ::= "<="
                    ::=
func_params         ::= func_params_elems "," func_varargs
                    ::= func_params_elems
                    ::= func_varargs
                    ::=
func_params_elems   ::= name func_param_default ( "," name func_param_default )*
func_param_default  ::= ":=" expr
                    ::=
func_varargs        ::= "*" name
                    ::= "*" splice
					::= "*" insert
func_decls          ::= func_decl ( "NEWLINE" func_decl )*
                    ::=
func_decl           ::= func_decl_nonlocals
                    ::= func_decl_rename
func_decl_nonlocals ::= "NONLOCAL" "ID" ( "," "ID" )* "NEWLINE"
func_decl_rename    ::= "RENAME" "ID" "AS" "ID" ( "," "ID" "AS" "ID" )* "NEWLINE"


expr_body ::= expr ( "NEWLINE" expr )*

expr ::= class_defn
     ::= func_defn
     ::= while           %precedence 5
     ::= if
	 ::= ndif
     ::= for             %precedence 5
	 ::= try
     ::= number
     ::= var_lookup
     ::= dict
     ::= set
     ::= list
     ::= dict
     ::= string
	 ::= module_lookup   %precedence 50
     ::= slot_lookup     %precedence 50
     ::= list
     ::= application     %precedence 40
     ::= get             %precedence 40
     ::= slice           %precedence 40
     ::= exbi
     ::= return			 %precedence 5
     ::= yield			 %precedence 5
     ::= fail            %precedence 5
     ::= raise           %precedence 5
     ::= assert          %precedence 5
     ::= break
     ::= continue
     ::= conjunction     %precedence 10
     ::= alternation     %precedence 10
     ::= assignment      %precedence 15
     ::= not             %precedence 17
     ::= neg             %precedence 35
     ::= binary          %precedence 30
     ::= comparison      %precedence 20
     ::= pass
     ::= import			 %precedence 5
     ::= splice
	 ::= insert
     ::= quasi_quotes
     ::= brackets

if      ::= "IF" expr ":" "INDENT" expr_body "DEDENT" ( if_elif )* if_else
        ::= "IF" expr "{" "INDENT" expr_body "DEDENT" "NEWLINE" "}" ( if_elif )* if_else
ndif    ::= "NDIF" expr ":" "INDENT" expr_body "DEDENT" ( if_elif )*
        ::= "NDIF" expr "{" "INDENT" expr_body "DEDENT" "NEWLINE" "}" ( if_elif )*
if_elif ::= "NEWLINE" "ELIF" expr ":" "INDENT" expr_body "DEDENT"
        ::= "NEWLINE" "ELIF" expr "{" "INDENT" expr_body "DEDENT" "NEWLINE" "}"
if_else ::= "NEWLINE" "ELSE" ":" "INDENT" expr_body "DEDENT"
        ::= "NEWLINE" "ELSE" "{" "INDENT" expr_body "DEDENT" "NEWLINE" "}"
        ::=

while ::= "WHILE" expr ":" "INDENT" expr_body "DEDENT" exhausted broken
      ::= "WHILE" expr

for ::= "FOR" expr ":" "INDENT" expr_body "DEDENT" exhausted broken
    ::= "FOR" expr

try           ::= "TRY" ":" "INDENT" expr_body "DEDENT" ( try_catch )*
try_catch     ::= "NEWLINE" "CATCH" expr try_catch_var ":" "INDENT" expr_body "DEDENT"
try_catch_var ::= "INTO" name
              ::=

exhausted ::= "NEWLINE" "EXHAUSTED" ":" "INDENT" expr_body "DEDENT"
          ::=

broken ::= "NEWLINE" "BROKEN" ":" "INDENT" expr_body "DEDENT"
       ::=

number ::= "INT"
       ::= "FLOAT"

var_lookup ::= "ID"
           ::= "&" "ID"

string ::= "STRING"

module_lookup ::= name ( "::" name )+

slot_lookup ::= expr "." "ID"
            ::= expr "." splice
            ::= expr "." insert

list ::= "[" expr ( "," expr )* "]"
     ::= "[" "]"

dict ::= "DICT{" expr ":" expr ( "," expr ":" expr )* "}"
     ::= "DICT{" "}"

set ::= "SET{" expr ( "," expr )* "}"
    ::= "SET{" "}"

application ::= expr "(" expr ( "," expr )* ")"
            ::= expr "(" ")"

get ::= expr "[" expr "]"

slice ::= expr "[" expr ":" expr "]"
      ::= expr "[" ":" expr "]"
      ::= expr "[" expr ":" "]"
      ::= expr "[" ":" "]"

exbi ::= "EXBI" expr "." "ID"

return ::= "RETURN" expr
       ::= "RETURN"

yield ::= "YIELD" expr

fail ::= "FAIL"

raise ::= "RAISE" expr

assert ::= "ASSERT" expr

break ::= "BREAK"

continue ::= "CONTINUE"

conjunction ::= expr ( "&" expr )+

alternation ::= expr ( "|" expr )+

assignment        ::= assignment_target ( "," assignment_target )* assignment_type expr
assignment_target ::= name
                  ::= slot_lookup
                  ::= get
                  ::= slice
assignment_type   ::= ":="
                  ::= "*="
                  ::= "/="
                  ::= "+="
                  ::= "-="

not ::= "NOT" expr

neg ::= "-" expr

binary    ::= expr binary_op expr
binary_op ::= "*"       %precedence 40
          ::= "/"       %precedence 30
          ::= "%"       %precedence 30
          ::= "+"       %precedence 20
          ::= "-"       %precedence 20

comparison    ::= expr comparison_op expr
comparison_op ::= "IS"
              ::= "=="
              ::= "!="
              ::= "<="
              ::= ">="
              ::= "<"
              ::= ">"

pass ::= "PASS"

splice        ::= expr_splice
              ::= dsl_splice
expr_splice   ::= "$" splice_type "<" expr ">"
dsl_splice    ::= "$" splice_type "<<" expr ">>" ":" "DSL_BLOCK"
              ::= "$" splice_type "<<" expr ">>" "<<" "DSL_BLOCK" ">>"
splice_type   ::= "ID"
              ::=

insert        ::= "$" insert_type "{" expr "}"
insert_type   ::= "ID"
              ::=

quasi_quotes ::= quasi_quotes_customize "INDENT" expr_body "DEDENT" "NEWLINE" "|]"
             ::= quasi_quotes_customize expr "|]"
quasi_quotes_customize ::= "[" "<" expr ">" "|"
quasi_quotes_customize ::= "[|"

brackets ::= "(" expr ")"
"""





class Parser(Earley::Parser::Parser):

	func error(self, token):

		if token.value is null:
			token_print := token.type
		else:
			token_print := token.value
		
		Core::peek_compiler().error(Strings::format("Parsing error at or near `%s' token.", token_print), token.src_infos)




func parse(src_data):

	compiler := Core::peek_compiler()

	compiler.tokenizer.tokenize(src_data, [[compiler.mod_id, 0]], [], [])
	tokens_map := Tokenizer::tokens_map([], [])
	grammar, rule_names := Grammar::compile(GRAMMAR, "top_level", tokens_map)

	return Parser.new().parse(grammar, rule_names, tokens_map, compiler.tokenizer.tokens)



func parse_expr_body(src_data):

	compiler := Core::peek_compiler()

	compiler.tokenizer.tokenize(src_data, [[compiler.mod_id, 0]], [], [])
	tokens_map := Tokenizer::tokens_map([], [])
	grammar, rule_names := Grammar::compile(GRAMMAR, "expr_body", tokens_map)

	return Parser.new().parse(grammar, rule_names, tokens_map, compiler.tokenizer.tokens)
