// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import POSIX_File, Strings, Sys



DIRECTORY_SEPARATOR := "/"
EXTENSION_SEPARATOR := "."




File := POSIX_File::File



////////////////////////////////////////////////////////////////////////////////////////////////////
// Opening / manipulating file objects
//

func open(path, mode):

	return File.new(path, mode)



////////////////////////////////////////////////////////////////////////////////////////////////////
// Examining / testing file properties
//

iter_dir_entries := POSIX_File::iter_dir_entries
exists := POSIX_File::exists
is_dir := POSIX_File::is_dir
is_file := POSIX_File::is_file



////////////////////////////////////////////////////////////////////////////////////////////////////
// Temporary files
//

//temp_name := POSIX_File::temp_name



////////////////////////////////////////////////////////////////////////////////////////////////////
// File name manipulation
//

func split_leaf(path):

	if i := path.rfind_index(DIRECTORY_SEPARATOR):
		return [path[ : i], path[i + 1 : ]]
	else:
		return ["", path]



func split_ext(path):

	if i := path.rfind_index(EXTENSION_SEPARATOR):
		return [path[ : i], path[i + 1 : ]]
	else:
		return [path, ""]
	


func split_names(path):

	return Strings::split(path, DIRECTORY_SEPARATOR)



func join_names(*names):

	flattened := []
	i := 0
	for name := names.iterate():
		// When joining names together, we try to avoid unnecessary directory separator characters.
		// The rules are simple: we always strip directory seperators from the end of each name, and
		// we strip directory separators off the beginning of all but the first name. This last
		// condition is important since we need to allow names such as /home/blah where the initial
		// directory separator is significant.
		if i == 1:
			while name.prefixed_by(DIRECTORY_SEPARATOR):
				name := name[DIRECTORY_SEPARATOR.len() : ]
		else:
			i := 1
		while name.suffixed_by(DIRECTORY_SEPARATOR):
			name := name[ : name.len() - DIRECTORY_SEPARATOR.len()]
		flattened.append(name)

	return Strings::join(flattened, DIRECTORY_SEPARATOR)



func join_ext(path, ext):

	return path + EXTENSION_SEPARATOR + ext



canon_path := POSIX_File::canon_path



//
// Given two canonicalised pathnames, succeeds if path is (textually) an entry in dir_path. i.e.
// ("/a", "/a/b") succeeds, but ("/a", "/c") and ("/a", "/a/b/c") both fail.
//

func is_entry_in_dir(dir_path, path):

	if not path.prefixed_by(dir_path):
		return fail
	
	i := dir_path.len()
	while i < path.len() & path[i] == DIRECTORY_SEPARATOR:
		i += 1
	if path[i : ].find(DIRECTORY_SEPARATOR):
		return fail
	
	return 1



//func main():
//
//	Sys::println(split_leaf("a/b/c"))
//	Sys::println(split_leaf("abc"))
//	Sys::println(split_dirs("a/b/c"))
//	Sys::println(split_ext("a/b/c.cv"))
//	Sys::println(split_ext("a/b/c"))
