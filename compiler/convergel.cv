// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Array, Builtins, File, Maths, Parse_Args, Platform::Properties, Strings, Sys, VM
import Compiler::Core, Compiler::BC_Exec, Compiler::BC_Mod, Compiler::BC_Lib, Compiler::BC_Pkg, Compiler::Link, Compiler::Targets::Available





class Linker:

    func link(self):
    
        self.includes := []
    
        options := []
        options.append(Parse_Args::Opt_Spec.new("output", "o", Parse_Args::MANDATORY, Parse_Args::TYPE_ANY, Parse_Args::FREQUENCY_ONE))
        options.append(Parse_Args::Opt_Spec.new("target", "T", Parse_Args::MANDATORY, Parse_Args::TYPE_ANY, Parse_Args::FREQUENCY_ZERO_OR_ONE))
        
        target_name := Strings::format("%dbit", Properties::word_bits)
        parsed_args, extra_args := Parse_Args::parse(self.usage, options)
        for option_name, option_val := parsed_args.iter():
            if option_name == "output":
                output_path := option_val
            elif option_name == "target":
                target_name := option_val
            else:
                raise "XXX"
        
        if extra_args.len() == 0:
            self.usage("Not enough arguments.")

        self.target := self.target_name_to_target(target_name)
        
        input_paths := extra_args
        input_paths.extend(Core::get_std_libraries(self))

        bc_mods := []
        for input_path := extra_args.iter():
            input_path := File::canon_path(input_path)
            input_file := File::open(input_path, "r")
            bc := input_file.read()

            if BC_Lib::is_bc_lib(bc):
                bc_lib := BC_Lib::BC_Lib.new(self.target)
                bc_lib.deserialize(bc)
                for bc_mod := bc_lib.iter_bc_mods():
                    bc_mods.append(bc_mod)
            elif BC_Mod::is_bc_mod(bc):
                bc_mod := BC_Mod::BC_Mod.new(self.target)
                bc_mod.deserialize_str(bc)
                bc_mods.append(bc_mod)
            elif BC_Pkg::is_bc_pkg(bc):
                bc_pkg := BC_Pkg::BC_Pkg.new(self.target)
                bc_pkg.deserialize_str(bc)
                bc_mods.append(bc_pkg)
            else:
                self.error(Strings::format("File '%s' is not of a known type.", input_path))

        self.bc_mods_map := Dict{}
        for bc_mod := bc_mods.iter():
            self.bc_mods_map[bc_mod.get_mod_id()] := bc_mod

        bc_mods := Link::link_min_pkgs(self, bc_mods)

        ser := BC_Exec::serialize(self.target, bc_mods)
        output_file := File::File.new(output_path, "w")
        output_file.write(ser)
        output_file.close()
        File::chmod(output_path, 493)



    func lib_link(self):
    
        // Create a .cvl library from a .cvb package. This reads in a .cvb package, and then bundles
        // up (recursively) all of its sub-modules and sub-packages into a single binary library.
    
        self.includes := []
    
        options := []
        options.append(Parse_Args::Opt_Spec.new("lib_mode", "l", Parse_Args::NONE, Parse_Args::TYPE_ANY, Parse_Args::FREQUENCY_ONE))
        options.append(Parse_Args::Opt_Spec.new("output", "o", Parse_Args::MANDATORY, Parse_Args::TYPE_ANY, Parse_Args::FREQUENCY_ONE))
        options.append(Parse_Args::Opt_Spec.new("target", "T", Parse_Args::MANDATORY, Parse_Args::TYPE_ANY, Parse_Args::FREQUENCY_ZERO_OR_ONE))
        
        target_name := Strings::format("%dbit", Properties::word_bits)
        parsed_args, extra_args := Parse_Args::parse(self.usage, options)
        for option_name, option_val := parsed_args.iter():
            ndif option_name == "lib_mode":
                pass
            elif option_name == "output":
                output_path := option_val
            elif option_name == "target":
                target_name := option_val
        
        if extra_args.len() == 0:
            self.usage("Not enough arguments.")

        self.target := self.target_name_to_target(target_name)

        bc_pkgs_stack := []
        input_path := File::canon_path(extra_args[0])
        input_file := File::open(input_path, "r")
        bc := input_file.read()
        input_file.close()
        if not BC_Pkg::is_bc_pkg(bc):
            self.error(Strings::format("File '%s' is not a compiled package.", input_path))
        bc_pkg := BC_Pkg::BC_Pkg.new(self.target)
        bc_pkg.deserialize_str(bc)
        
        // Read in every file from the command line. start_pkg will be set to a BC_Pkg::BC_Pkg
        // instance.
        
        start_pkg := null
        bc_objs := Dict{}
        for path := extra_args.iter():
            file := File::open(path, "r")
            bc := file.read()
            file.close()

            if BC_Mod::is_bc_mod(bc):
                if start_pkg is null:
                    self.error(Strings::format("First file '%s' is not a package.", extra_args[0]))
                bc_mod := BC_Mod::BC_Mod.new(self.target)
                bc_mod.deserialize_str(bc)
                bc_objs[bc_mod.get_mod_id()] := [bc, bc_mod]
            elif BC_Pkg::is_bc_pkg(bc):
                bc_pkg := BC_Pkg::BC_Pkg.new(self.target)
                bc_pkg.deserialize_str(bc)
                bc_objs[bc_pkg.get_mod_id()] := [bc, bc_pkg]
                if start_pkg is null:
                    start_pkg := bc_pkg
            else:
                self.error(Strings::format("File '%s' is not of a known type.", input_path))
        
        // Check (recursively) that every sub-module and sub-package of start_pkg was included in
        // the input files. At the same time, populate the set ser_mod_ids with the mod ids of all
        // necessary modules.
        
        pkgs_stack := [start_pkg]
        ser_mod_ids := Set{start_pkg.get_mod_id()}
        i := 0
        while i < pkgs_stack.len():
            bc_pkg := pkgs_stack[i]
            for defn_name, t := bc_pkg.get_entries().iter():
                mod_id, src_path := t
                if not bc_objs.find(mod_id):
                    msg := Strings::format("Module '%s' referenced in package '%s' not found", mod_id, bc_pkg.get_mod_id())
                    self.error(msg)
                ser_mod_ids.add(mod_id)
                _, cnd_bc_obj := bc_objs[mod_id]
                if BC_Pkg::BC_Pkg.instantiated(cnd_bc_obj):
                    pkgs_stack.append(cnd_bc_obj)
            i += 1

        // Pick out the required files necessary to create a coherent package (unneeded input files
        // are silently ignored)

        start_pkg_mod_id := start_pkg.get_mod_id()
        ser_bc_objs := [bc_objs[start_pkg_mod_id][0]]
        for mod_id := ser_mod_ids.iter():
            if mod_id == start_pkg_mod_id:
                continue
            ser_bc, _ := bc_objs[mod_id]
            ser_bc_objs.append(ser_bc)

        // Serialize the bc_objs. In one sense, the following should belong in
        // BC_Lib::BC_Lib.serialize. But by doing it here we can forego the pointless and expensive
        // string -> array -> string conversion.

        lib := Array::Array.new(self.target.ARRAY_TYPE)
        lib.extend_from_string(BC_Lib::LIB_INIT_STR)
        lib.append(BC_Lib::LIBRARY_VERSION)

        lib.append(ser_bc_objs.len())
        
        offsets := Array::Array.new(self.target.ARRAY_TYPE)
        serialized_modules := Array::Array.new(self.target.ARRAY_TYPE)
        for module := ser_bc_objs.iter():
            offsets.append((lib.len() + ser_bc_objs.len() + serialized_modules.len()) * self.target.WORDSIZE)
            serialized_modules.extend_from_string(module)
        
        lib.extend(offsets)
        lib.extend(serialized_modules)		
        
        output_file := File::File.new(output_path, "w")
        output_file.write(lib.serialize())



    func usage(self, msg):

        Sys::stderr.writeln(Strings::format("Error: %s", msg))
        Sys::stderr.writeln("Usage: convergel [-l] -o <output> <input> [... <input>]")
        Sys::exit(1)



    func error(self, msg, src_infos := null):

        self.print_msg("Error", msg, src_infos)
        Sys::exit(1)



    func warning(self, msg, src_infos := null):

        self.print_msg("Warning", msg, src_infos)



    func print_msg(self, pre_msg, msg, src_infos := null):

        if not src_infos is null:
            Sys::stderr.writeln(Strings::format("%s:", pre_msg))
            for src_info := src_infos.iter():
                mod := Builtins::Module.new(self.bc_mods_map[src_info[0]].serialize())
                line, col := mod.src_offset_to_line_column(src_info[1])
                
                Sys::stderr.writeln(Strings::format("  %s, line %d, column %d", src_info[0], line, col))

            Sys::stderr.writeln(msg)
        else:
            Sys::stderr.writeln(Strings::format("%s: %s", pre_msg, msg))



    func target_name_to_target(self, target_name):

        if not Available::TARGETS.find(target_name):
            self.error(Strings::format("No support yet for target '%s'.", target_name))

        return Available::TARGETS[target_name].new()



    //
    // Translates lists of bytecode src infos of the form [<import num>, <offset>] to proper src
    // infos of the form [<module id>, <offset>].
    //

    func _tn_src_infos(self, src_infos, mod):
    
        new_src_infos := []
        for mod_num, offset := src_infos.iter():
            if mod_num == -1:
                new_src_infos.append([mod.get_mod_id(), offset])
            else:
                new_src_infos.append([mod.get_imports()[mod_num][0], offset])

        return new_src_infos




func main():

    if Sys::argv.len() > 1 & Sys::argv[0] == "-l":
        Linker.new().lib_link()
    else:
        Linker.new().link()
