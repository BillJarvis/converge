// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


//
// This module handles executable files. It should be brought into line with the other BC_* modules.
//


import Array
import BC_Mod




EXEC_INIT_STR := "CONVEXEC"

EXEC_BYTECODE_HEADER := 0
EXEC_BYTECODE_FORMAT_VERSION := 2
EXEC_BYTECODE_NUM_MODULES := 3
EXEC_BYTECODE_MODULE_OFFSETS := 4




func serialize(target, bc_mods):

    ser_mods := Array::Array.new(target.ARRAY_TYPE)
    ser_mods_offsets := []
    for mod := bc_mods.iter():
        ser_mods_offsets.append(ser_mods.len_bytes())
        ser_mods.extend_from_string(mod.serialize())

    bc := Array::Array.new(target.ARRAY_TYPE)
    bc.extend_from_string(EXEC_INIT_STR)
    bc.append(0)  // Version
    bc.append(-1) // Number of modules
    bc[target.LIBRARY_BYTECODE_NUM_MODULES] := ser_mods_offsets.len()

    preamble_length := (bc.len() + ser_mods_offsets.len()) * target.WORDSIZE
    for mod_offset := ser_mods_offsets.iter():
        bc.append(preamble_length + mod_offset)

    bc.extend(ser_mods)

    sh_header := "#! /usr/bin/env converge\n"
    ser := sh_header + "\n" * (target.align(sh_header.len()) - sh_header.len()) + bc.serialize()
    
    return ser



func deserialize(target, exec_str):

    raise "XXX"
    exec_array := Array::Array.new(target.ARRAY_TYPE, exec_str)
    
    if exec_array[0 : EXEC_INIT_STR.len() / target.WORDSIZE].to_str() != EXEC_INIT_STR:
        raise "XXX"
    
    modules := []
    for i := 0.iter_to(exec_array[EXEC_BYTECODE_NUM_MODULES]):
        module_offset := exec_array[EXEC_BYTECODE_MODULE_OFFSETS + i] / target.WORDSIZE
        to := module_offset + (exec_array[module_offset + target.MODULE_BYTECODE_SIZE] / target.WORDSIZE)
        module := BC_Mod::BC_Mod.new(target)
        module.deserialize_array(exec_array[module_offset : to])
        modules.append([exec_str[module_offset * target.WORDSIZE : to * target.WORDSIZE], module])
        assert module.serialize() == exec_str[module_offset * target.WORDSIZE : to * target.WORDSIZE]
    
    return modules



//
// Succeeds if bc appears to be a valid Converge executeable.
//

func is_bc_exec(bc):

    i := 0
    if bc.prefixed_by("#!"):
        i += bc.find_index("\n")
        while i < bc.len() & bc[i] == "\n":
            i += 1

    if bc.prefixed_by(EXEC_INIT_STR, i):
        return 1

    fail
