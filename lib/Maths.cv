// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Builtins, Exceptions




func max(*objs):

	if objs.len() < 1:
		raise Exceptions::Parameter_Exception("Maximum value can only be computed when passed one or more objects")
		
	current_max := objs[0]
	for i := 1.to(objs.len()):
		if objs[i] > current_max:
			current_max := objs[i]

	return current_max



func min(*objs):

	if objs.len() < 1:
		raise Exceptions::Parameter_Exception("Minimum value can only be computed when passed one or more objects")
		
	current_min := objs[0]
	for i := 1.to(objs.len()):
		if objs[i] < current_min:
			current_min := objs[i]

	return current_min



func powerset(s):

	array := [0] * s.len()
	sl := Builtins::List.new(s)
	while 1:
		ss := Set{} // Subset
		
		for i := 0.to(s.len()):
			if array[i] == 1:
				ss.add(sl[i])
		yield ss

		for i := (s.len() - 1).to(-1, -1):
			if array[i] == 0:
				array[i] := 1
				break
			else:
				array[i] := 0
		exhausted:
			return fail
