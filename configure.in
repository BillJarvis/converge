AC_INIT([converge], CONVERGE_VERSION)

# If shipping a production release, these two variables should be changed to e.g.:
#
#   converge_version=0.7
#   converge_date=2006/01/04

converge_version=current
converge_date=`date +%Y/%m/%d`


####################################################################################################
# Generic initialization
#

AC_CONFIG_HEADER(vm/Config.h)

AC_LANG(C)

AC_PROG_CC
AC_ISC_POSIX
AC_PROG_GCC_TRADITIONAL
AC_PROG_INSTALL

AC_SUBST(CONVERGE_VERSION, [$converge_version])
AC_SUBST(CONVERGE_DATE, [$converge_date])

AC_SUBST(CONVERGE_DIR, [`pwd`])


####################################################################################################
# Generic config
#

AH_TOP([
#ifndef _CON_CONFIG_H
#define _CON_CONFIG_H

// Switch to 1 to turn debugging output on

#define CON_FULL_DEBUG 0

// Some constants which may be useful to bump up for performance, at the expense of memory

#define CON_DEFAULT_VM_NUM_THREADS 10

#define CON_DEFAULT_FIRST_N_INTS_TO_INTERN 1024

#define CON_DEFAULT_STRING_NUM_CACHE_ENTRIES 256

#define CON_DEFAULT_NUM_COUNTING_MUTEXES 10
#define CON_DEFAULT_MAX_USERS_PER_COUNTING_MUTEX 512
#define CON_DEFAULT_NUM_SLOTS 16
#define CON_DEFAULT_FULL_ENTRIES_SIZE (16 * (sizeof(Con_Slots_Full_Entry) + 8))

#define CON_DEFAULT_GC_STACK_NUM_ENTRIES 5000

#define CON_DEFAULT_DICT_NUM_ENTRIES_ALLOCATED 32
#define CON_DEFAULT_LIST_NUM_ENTRIES_ALLOCATED 16
#define CON_DEFAULT_SET_NUM_ENTRIES_ALLOCATED 32
#define CON_DEFAULT_ARRAY_NUM_ENTRIES_ALLOCATED 256

#define CON_DEFAULT_CON_C_CLASS_OBJ_NUM_INSTANCE_MUTEXES 8

#define CON_DEFAULT_NUM_OBJECTS_TO_TRACK 8192

// Default Converge stack size in words

#define CON_DEFAULT_CON_STACK_SIZE (4096-12)
])

AH_BOTTOM([#endif])



####################################################################################################
# Compiler configuration
#

AH_TEMPLATE(CON_CC, [The name of your C compiler.])
AC_DEFINE_UNQUOTED(CON_CC, [$CC])


extra_cflags="-I/usr/local/include -I/usr/include/pcre"
extra_libs="-L/usr/local/lib"


AC_ARG_ENABLE(static, AC_HELP_STRING([--enable-static], [statically link in external libraries [[default=NO]]]), [static_link=1], [static_link=0])



####################################################################################################
# Platform check
#

AC_MSG_CHECKING(platform)
AH_TEMPLATE(CON_OSNAME, [Define to your platforms operating system name. Do not include version numbers.])
posix=0
mingw=0
operating_system=`uname -s`
case $operating_system in
	OpenBSD | FreeBSD | NetBSD | Linux | Darwin | CYGWIN_NT*)
		AC_MSG_RESULT(POSIX)
		posix=1
		AC_DEFINE(CON_PLATFORM_POSIX, [], [Define if you are running on a POSiX platform. Note that you can can only define one CON_PLATFORM_* variable.])
		echo $operating_system | grep "^CYGWIN_NT"
		if [[ $? -eq 0 ]]; then
			AC_SUBST(EXEC_EXT, ".exe")
			AC_DEFINE(CON_OSNAME, [CYGWIN_NT])
		else
			AC_SUBST(EXEC_EXT, "")
			AC_DEFINE_UNQUOTED(CON_OSNAME, "$operating_system")
		fi;;
	MINGW* )
		AC_MSG_RESULT(MINGW)
		mingw=1
		AC_DEFINE(CON_PLATFORM_MINGW, [], [Define if you are running on the MinGW platform. Note that you can can only define one CON_PLATFORM_* variable.])
		AC_SUBST(PLATFORM, MinGW)
		AC_SUBST(EXEC_EXT, ".exe")
		AC_DEFINE(CON_OSNAME, "MINGW");;
	*) AC_MSG_ERROR([Unknown platform "$operating_system"]);;
esac

AC_MSG_CHECKING(for filename case sensitivity)
AH_TEMPLATE(CON_FILENAMES_CASE_SENSITIVE, [Define if your platforms file names are (in general) case sensitive.])
case $operating_system in
	Darwin | MINGW*)
		AC_MSG_RESULT(case insensitive)
		case_insensitive_file_system=1;;
	*)
		AC_MSG_RESULT(case sensitive)
		AC_DEFINE(CON_FILENAMES_CASE_SENSITIVE)
		case_insensitive_file_system=0;;
esac

case $operating_system in
	Linux ) AC_DEFINE(READ_VM_PATH_FROM_PROC_SELF_EXE_SYMLINK, [], [Define if your operating system allows the location of the VM executable to be determined by reading the symlink /proc/self/exe.])
esac

AC_MSG_CHECKING(directory and file name extension separators)
AH_TEMPLATE(CON_DIR_SEP, [Define to your platforms directory separator char(s).])
AH_TEMPLATE(CON_EXT_SEP, [Define to your platforms filename extension separator.])
if [[ $posix -eq 1 ]]; then
	AC_MSG_RESULT(/ .);
	AC_DEFINE(CON_DIR_SEP, "/")
	AC_DEFINE(CON_EXT_SEP, ".")
	AC_SUBST(CON_DIR_SEP, "/")
	AC_SUBST(CON_EXT_SEP, ".")
elif [[ $mingw -eq 1 ]]; then
	AC_MSG_RESULT(\\ .);
	AC_DEFINE(CON_DIR_SEP, "\\")
	AC_DEFINE(CON_EXT_SEP, ".")
	AC_SUBST(CON_DIR_SEP, "\\\\")
	AC_SUBST(CON_EXT_SEP, ".")
else
	AC_MSG_ERROR([Unable to determine directory / file name extension separator char(s).])
fi


AC_MSG_CHECKING(for readlink -f)
case $operating_system in
	Darwin)
		have_readlink_f=0
		AC_MSG_RESULT(no);;
	*)
		have_readlink_f=1
		AC_MSG_RESULT(yes);;
esac


####################################################################################################
# Machine dependent configuration
#

machine_type=`uname -m`

AH_TEMPLATE(CON_ARCH, [Define to your system architecture.])

AH_TEMPLATE(CON_C_STACK_GROWS_DOWN, [Define if the stack grows down from a particular word. Undefine if the stack grows upwards.])

AC_MSG_CHECKING([machine type])
case $machine_type in
	amd64 | x86_64 )
		AC_MSG_RESULT(x86_64)
		AC_DEFINE(CON_ARCH_X86_64, [], [Define if running on x86_64])
		AC_SUBST(CON_ARCH, "x86_64")
		AC_DEFINE(CON_C_STACK_GROWS_DOWN);;
	i386 | i686 )
		AC_MSG_RESULT(x86)
		AC_DEFINE(CON_ARCH_X86, [], [Define if running on x86])
		AC_SUBST(CON_ARCH, "x86")
		AC_DEFINE(CON_C_STACK_GROWS_DOWN);;
	sun4u) 
		AC_MSG_RESULT(sun4u)
		AC_DEFINE(CON_ARCH_SUN4U, [], [Define if running on sun4u])
		AC_SUBST(CON_ARCH, "sun4u")
		AC_DEFINE(CON_C_STACK_GROWS_DOWN);;
	*) AC_MSG_ERROR([Unknown machine type "$machine_type"]);;
esac

AH_TEMPLATE(CON_BYTEORDER, [Whether this is a big endian (CON_BIG_ENDIAN) or little endian (CON_LITTLE_ENDIAN) machine.])
AC_C_BIGENDIAN([AC_DEFINE(CON_BYTEORDER, CON_BIG_ENDIAN)],
	[AC_DEFINE(CON_BYTEORDER, CON_LITTLE_ENDIAN)])

AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)

AH_TEMPLATE(CON_INT, [The integer type equivalent to a machine word.])
AH_TEMPLATE(CON_INT_FORMAT, [The format type equivalent to a machine word.])
AC_CHECK_TYPE(ptrdiff_t)

AC_MSG_CHECKING([integer and format types equivalent to a machine word])
AC_TRY_RUN([
#include <stddef.h>

int main()
{
	if (sizeof(ptrdiff_t) == sizeof(int))
		return 0;
	else
		return 1;
}], 
	[AC_MSG_RESULT(int %d)
	AC_DEFINE(CON_INT, int)
	AC_DEFINE(CON_INT_FORMAT, "%d")
	],
	[AC_TRY_RUN([
#include <stddef.h>

int main()
{
	if (sizeof(ptrdiff_t) == sizeof(long))
		return 0;
	else
		return 1;
}],
		[AC_MSG_RESULT(long %ld)
		AC_DEFINE(CON_INT, long)
		AC_DEFINE(CON_INT_FORMAT, "%ld")
		],
		[AC_TRY_RUN([
#include <stddef.h>

int main()
{
	if (sizeof(ptrdiff_t) == sizeof(long long))
		return 0;
	else
		return 1;
}],
			[AC_MSG_RESULT(long long %lld)
			AC_DEFINE(CON_INT, long long)
			AC_DEFINE(CON_INT_FORMAT, "%lld")
			],
			AC_MSG_FAILURE(Unknown word size)
		)]
	)]
)

AC_CHECK_SIZEOF(CON_INT)

case $ac_cv_sizeof_CON_INT in
	4 ) AC_C_BIGENDIAN([bootstrap_dir="bootstrap/32bit_big_endian"], [bootstrap_dir="bootstrap/32bit_little_endian"]);;
	8 ) AC_C_BIGENDIAN([bootstrap_dir="bootstrap/64bit_big_endian"], [bootstrap_dir="bootstrap/64bit_little_endian"]);;
	* ) AC_MSG_ERROR([Unknown word size2 $ac_cv_sizeof_CON_INT]);;
esac

AH_TEMPLATE(CON_FLOAT, [The appropriate type for a double word float on your machine.])
AC_DEFINE(CON_FLOAT, double)
AC_CHECK_SIZEOF(double)
AC_CHECK_SIZEOF(CON_FLOAT)

AC_MSG_CHECKING([for architecture specific memmove])
# XXX Since Darwin's as doesn't seem to like the included memmove.o, we simply avoid compiling it.
# If anyone knows how to fix it (or whether this is worth fixing), please shout.
if [[ -f vm/Platform/Arch/$CON_ARCH/memmove.S -a $operating_system != "Darwin" ]]; then
	AC_MSG_RESULT(Platform/Arch/$CON_ARCH/memmove.S)
	AC_SUBST(CON_MEMMOVE, "Platform/Arch/$CON_ARCH/memmove.o")
else
	AC_MSG_RESULT(none found)
fi


####################################################################################################
# Thread library checks
#

AC_MSG_CHECKING(whether thread support required)
AC_ARG_WITH(threads, AC_HELP_STRING(--with-threads, enable thread support), [], [with_threads="no"])

if [[ "$with_threads" = "yes" ]]; then
	AC_MSG_RESULT(yes)
	AC_CHECK_HEADER(pthread.h, , [AC_MSG_ERROR([Unable to find pthread.h])], [#include "pthread.h"])
	AC_DEFINE(CON_THREADS_PTHREADS, [], [Define if you have, and want to use, pthreads. Note that you can can only define one CON_THREADS_* variable.])
	
	AH_TEMPLATE(CON_HAVE_PTHREAD_YIELD,
		[Define if you have the pthread_yield function. If pthreads are available, this function is used to avoid spin locking.])
	AC_CHECK_DECL([pthread_yield], [AC_DEFINE(CON_HAVE_PTHREAD_YIELD)], [], [#include <pthread.h>])
	
	AC_SUBST(CON_THREAD_ATOM_OBJ, "Platform/Threads/PThreads/PThreads_Atom.o")
	AC_SUBST(CON_THREAD_CLASS_OBJ, "Platform/Threads/PThreads/PThreads_Class.o")
	AC_SUBST(CON_THREAD_MODULE_OBJ, "Platform/Threads/PThreads/PThreads_Module.o")
	AC_SUBST(CON_THREAD_TEST_DIR, "pthreads")
	
	extra_libs="$extra_libs -lpthread"
else
	AC_MSG_RESULT(no)
	AC_DEFINE(CON_THREADS_SINGLE_THREADED, [], [Define if you don't have a supported threads library on your platform, or if you wish to use the single threaded version of Converge. Note that you can can only define one CON_THREADS_* variable.])
	AC_SUBST(CON_THREAD_ATOM_OBJ, "Platform/Threads/Single_Thread/Single_Thread_Atom.o")
	AC_SUBST(CON_THREAD_CLASS_OBJ, "Platform/Threads/Single_Thread/Single_Thread_Class.o")
	AC_SUBST(CON_THREAD_TEST_DIR, "single_thread")
fi



####################################################################################################
# Package / header file checks & module inclusions
#

CFLAGS="$extra_cflags"

AC_PATH_PROG(pcre_config, pcre-config, fail)
if [[ "$pcre_config" = "fail" ]]; then
	AC_MSG_ERROR([Unable to find pcre-config])
fi
extra_cflags="$extra_cflags `$pcre_config --cflags`"
if [[ $static_link -eq 1 ]]; then
	# Statically link PCRE
	AC_MSG_CHECKING([location of libpcre.a])
	libpcre_a=""
	for dir in `pcre-config --libs | tr " " "\n" | grep "^-L" | sort -u | sed "s/^-L//"`; do
		cnd=$dir/libpcre.a
		if [[ -f $cnd ]]; then
			libpcre_a=$cnd
		fi
	done
	if [[ "$libpcre_a" = "" ]]; then
		AC_MSG_ERROR([unable to find libpcre.a.])
	fi
	AC_MSG_RESULT($libpcre_a)
	extra_cflags="$extra_cflags -DPCRE_STATIC"
	extra_libs="$extra_libs $libpcre_a `$pcre_config --libs | sed 's/-lpcre//'`"
else
	extra_libs="$extra_libs `$pcre_config --libs`"
fi

AC_PATH_PROG(xml2_config, xml2-config, fail)
if [[ "$xml2_config" = "fail" ]]; then
	AC_MSG_ERROR([Unable to find xml2-config])
fi
extra_cflags="$extra_cflags `$xml2_config --cflags`"
if [[ $static_link -eq 1 ]]; then
	# Statically link libXML2 on MinGW
	AC_MSG_CHECKING([location of libxml2.a])
	libxml2_a=""
	for dir in `xml2-config --libs | tr " " "\n" | grep "^-L" | sort -u | sed "s/^-L//"`; do
		cnd=$dir/libxml2.a
		if [[ -f $cnd ]]; then
			libxml2_a=$cnd
		fi
	done
	if [[ "$libxml2_a" = "" ]]; then
		AC_MSG_ERROR([unable to find libxml2.a.])
	fi
	AC_MSG_RESULT($libxml2_a)
	extra_libs="$extra_libs $libxml2_a `$xml2_config --libs | sed 's/-lxml2//'`"
else
	extra_libs="$extra_libs `$xml2_config --libs`"
fi

AC_MSG_CHECKING([which modules to compile])
mod_paths=`ls vm/Modules/*.c | sed "s/c$/o/"`
if [[ $posix -eq 1 -o $mingw -eq 1 ]]; then
	mod_paths="$mod_paths vm/Platform/POSIX/Modules/POSIX_File.o"
fi
mod_names=""
for path in $mod_paths; do
	mod_names="$mod_names `echo $path | sed "s/.*\///" | sed "s/\.o//"`"
done
sorted_mod_names=""
for mod_name in `echo $mod_names | tr " " "\\n" | sort -f | tr "\\n" " "`; do
	sorted_mod_names="$sorted_mod_names $mod_name"
done
sorted_mod_names=`echo $sorted_mod_names | sed "s/^ //"`
AC_MSG_RESULT($sorted_mod_names)
AC_SUBST(MODULES, [`echo $mod_paths | sed "s/vm\///g"`])

externs=""
modules_list=""
mod_ids=""
i=0
for mod_name in $sorted_mod_names; do
	if [[ $i -gt 0 ]]; then
		modules_list="$modules_list, "
	fi
	externs=`printf "%s\\n%s\\n%s" "$externs" "extern _Con_Modules_get_init_t Con_Module_${mod_name}_init;" "extern _Con_Modules_get_import_t Con_Module_${mod_name}_import;"`
	modules_list="$modules_list{ (u_char *) \"$mod_name\", Con_Module_${mod_name}_init, Con_Module_${mod_name}_import }"
	cap_mod_name=`echo $mod_name | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"`
	mod_ids=`printf "%s\\n#define CON_STDLIB_%s \"%s\"\\n" "$mod_ids" "$cap_mod_name" "$mod_name"`
	i=$(($i + 1))
done
AC_SUBST(MODULES_LIST, $modules_list)

cd lib
lib_dir=`pwd -P | sed "s/\//\\\\\\\\\//g"`
cd Stdlib
for mod_path in `find . | grep cv$ | sed "s/^\\.\\///"`; do
	mod_name=`echo $mod_path | sed "s/\\//_/g" | sed "s/\\.cv$//" | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"`
	if [[ $have_readlink_f -eq 0 ]]; then
		mod_id=`perl -e "use Cwd 'realpath'; print realpath '$mod_path';" | sed "s/$lib_dir//"`
	else
		mod_id=`readlink -f $mod_path | sed "s/$lib_dir//"`
	fi
	if [[ $mingw -eq 1 ]]; then
		# Clean up MinGW's mutant filenames
		mod_id=`echo "$mod_id" | sed 's/\//\\\\\\\/g'`
	fi
	if [[ $case_insensitive_file_system -eq 1 ]]; then
		mod_id=`echo "$mod_id" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"`
	fi
	mod_ids=`printf "%s\\n#define CON_STDLIB_%s \"%s\"\\n" "$mod_ids" "$mod_name" "$mod_id"`
done
cd ../..

cat << EOF > vm/Std_Modules.c
// This file is auto-generated.
//
// Any changes you make are likely to be lost.

#include "Config.h"

#include "Core.h"
#include "Modules.h"

$externs

Con_Modules_Spec Con_Builtin_Modules[[]] = {$modules_list, { NULL, NULL, NULL }};

EOF

cat << EOF > vm/Std_Modules.h
// This file is auto-generated.
//
// Any changes you make are likely to be lost.

#ifndef CON_STD_MODULES_H
#define CON_STD_MODULES_H
$mod_ids

#endif
EOF



####################################################################################################
# Function / feature checks
#

# mergesort

AH_TEMPLATE(CON_HAVE_MERGESORT,
  [Define if you have the mergesort function. If available, this is used to speed up the garbage collector.])

AC_CHECK_FUNC(mergesort, [AC_DEFINE(CON_HAVE_MERGESORT)])


# fgetln

AH_TEMPLATE(CON_HAVE_NATIVE_FGETLN,
  [Define if your OS natively defines the fgetln function])
AC_CHECK_FUNC(fgetln, [AC_DEFINE(CON_HAVE_NATIVE_FGETLN)], [AC_SUBST(PLATFORM_FGETLN, Platform/fgetln.o)])


# getdirentries

AH_TEMPLATE(CON_HAVE_GETDIRENTRIES,
  [Define if your platform has the getdirentries function.])

AC_CHECK_FUNC(getdirentries, [AC_DEFINE(CON_HAVE_GETDIRENTRIES)])


# alloca

AC_FUNC_ALLOCA


# see what dirent calls d_fileno

AH_TEMPLATE(CON_DIRENT_D_FILENO,
  [Define to whatever your dirent struct calls d_fileno (e.g. d_ino under Linux and Cygwin).])

AC_CHECK_MEMBER(struct dirent.d_fileno,
	[AC_DEFINE(CON_DIRENT_D_FILENO, d_fileno)],
	[AC_CHECK_MEMBER(struct dirent.d_ino,
		[AC_DEFINE(CON_DIRENT_D_FILENO, d_ino)],
		,
		[#include "dirent.h"])
	],
	[#include "dirent.h"])


# see whether dirent has d_reclen or not

AH_TEMPLATE(CON_DIRENT_HAS_D_RECLEN,
  [Define if your dirent struct has the d_reclen member.])

AC_CHECK_MEMBER(struct dirent.d_reclen,
	[AC_DEFINE(CON_DIRENT_HAS_D_RECLEN)],
	,
	[#include "dirent.h"])


# Find what stat calls st_mtimespec

AH_TEMPLATE(STAT_ST_MTIMESPEC,
  [Define to whatever your stat struct calls st_mtimespec (e.g. st_mtim under Linux and Cygwin).])

AC_CHECK_MEMBER(struct stat.st_mtimespec,
	[AC_DEFINE(STAT_ST_MTIMESPEC, st_mtimespec)
	st_mtimespec="st_mtimespec"],
	[AC_CHECK_MEMBER(struct stat.st_mtim,
		[AC_DEFINE(STAT_ST_MTIMESPEC, st_mtim)
		st_mtimespec="st_mtim"],
		[AC_CHECK_MEMBER(struct stat.st_mtime,
			[AC_DEFINE(STAT_ST_MTIMESPEC, st_mtime)
			st_mtimespec="st_mtime"],
			,
			[#include <sys/stat.h>])
		],
		[#include <sys/stat.h>])
	],
	[#include <sys/stat.h>])


# Find the type of st_mtimespec

AC_MSG_CHECKING([type of stat.$st_mtimespec])

AH_TEMPLATE(STAT_ST_MTIMESPEC_TYPE,
  [Define to the type of st_mtimespec.])

AC_TRY_RUN([
#include <sys/stat.h>

int main()
{
	struct stat cv_sb;
	struct timespec mt = cv_sb.STAT_ST_MTIMESPEC;
	
	return 0;
}],
	[AC_MSG_RESULT(struct timespec)
	AC_DEFINE(STAT_ST_MTIMESPEC_TYPE, struct timespec)
	AC_DEFINE(STAT_ST_MTIMESPEC_TYPE_STRUCT_TIMESPEC, [], [Define if you stat.STAT_ST_MTIMESPEC is of type struct timespec.])],
	[AC_TRY_RUN([
#include <sys/stat.h>

int main()
{
	struct stat cv_sb;
	time_t mt = cv_sb.STAT_ST_MTIMESPEC;
	
	return 0;
}],
		[AC_MSG_RESULT(time_t)
		AC_DEFINE(STAT_ST_MTIMESPEC_TYPE, time_t)
		AC_DEFINE(STAT_ST_MTIMESPEC_TYPE_TIME_T, [], [Define if you stat.STAT_ST_MTIMESPEC is of type time_t.])],
		[AC_MSG_ERROR(unable to determine type)])])


# glibc is brain dead with respect to strerror_r.

AC_FUNC_STRERROR_R


# strerror (MinGW doesn't define strerror, hence the need to check for this too)

AH_TEMPLATE(CON_HAVE_STRERROR,
  [Define if your platform has the strerror function.])

AC_CHECK_FUNC(strerror, [AC_DEFINE(CON_HAVE_STRERROR)])


# random

AH_TEMPLATE(CON_HAVE_RANDOM,
  [Define if your platform has the random function family.])

AC_CHECK_FUNC(random, [AC_DEFINE(CON_HAVE_RANDOM)])


# srandomdev

AH_TEMPLATE(CON_HAVE_SRANDOMDEV,
  [Define if your platform has the srandomdev function.])

AC_CHECK_FUNC(srandomdev, [AC_DEFINE(CON_HAVE_SRANDOMDEV)])


# sigsetjmp

AH_TEMPLATE(JMP_BUF,
  [Define to whatever your platform calls jmp_buf (e.g. this will be sigjmp_buf for POSiX platforms).])

AH_TEMPLATE(CON_HAVE_SIGSETJMP,
  [Define if your platform has sigsetjmp).])

if [[ $mingw -eq 1 ]]; then
	AC_DEFINE(JMP_BUF, jmp_buf)
elif [[ $posix -eq 1 ]]; then
	AC_DEFINE(JMP_BUF, sigjmp_buf)
	AC_DEFINE(CON_HAVE_SIGSETJMP)
	
	AC_MSG_CHECKING([for sigsetjmp])
	
	AH_TEMPLATE(_POSIX_C_SOURCE,
	  [Define  your platform needs _POSIX_C_SOURCE for sigsetjmp to be defined.])

	CFLAGS="-std=c99 $extra_cflags"
	AC_TRY_RUN([
#include <setjmp.h>

int main()
{
	JMP_BUF return_env;
	sigsetjmp(return_env, 0);
	
	return 0;
}], [AC_MSG_RESULT(yes)], [CFLAGS="-std=c99 $extra_cflags -D_POSIX_C_SOURCE"
	AC_TRY_RUN([
#include <setjmp.h>

int main()
{
	JMP_BUF return_env;
	sigsetjmp(return_env, 0);
	
	return 0;
}], [AC_MSG_RESULT(-D_POSIX_C_SOURCE)
	extra_cflags="$extra_cflags -D_POSIX_C_SOURCE"], [AC_MSG_ERROR(unable to find sigsetjmp)])])
fi


# err

AH_TEMPLATE(CON_HAVE_NATIVE_ERR,
  [Define if your OS natively defines the err function.])
AC_CHECK_FUNC(err, [AC_DEFINE(CON_HAVE_NATIVE_ERR)], [AC_SUBST(PLATFORM_ERR, Platform/err.o)])


# u_char

AC_MSG_CHECKING([for u_char etc])

AH_TEMPLATE(CON_HAVE_U_TYPES,
  [Define if your OS natively defines u_char and friends.])

CFLAGS="-std=c99 $extra_cflags"
AC_TRY_RUN([
#include <sys/types.h>

int main()
{
	u_char *x;
	
	return 0;
}], [AC_MSG_RESULT(yes)
     AC_DEFINE(CON_HAVE_U_TYPES)], [CFLAGS="-std=c99 $extra_cflags -D_BSD_SOURCE"
	AC_TRY_RUN([
#include <sys/types.h>

int main()
{
	u_char *x;
	
	return 0;
}], [AC_MSG_RESULT(-D_BSD_SOURCE)
     AC_DEFINE(CON_HAVE_U_TYPES)
     extra_cflags="$extra_cflags -D_BSD_SOURCE"],
    [AC_MSG_RESULT(no)])])


# realpath

AC_CHECK_FUNC(realpath, [], [AC_SUBST(PLATFORM_REALPATH, Platform/MinGW/realpath.o)])


# bzero

AC_CHECK_FUNC(bzero, [], [AC_SUBST(PLATFORM_BZERO, Platform/bzero.o)])


# setenv

AH_TEMPLATE(CON_HAVE_SETENV,
  [Define if your platform has the setenv function.])
AC_CHECK_FUNC(setenv, [AC_DEFINE(CON_HAVE_SETENV)])


# __progname

AC_MSG_CHECKING([whether __progname is defined])

AH_TEMPLATE(CON_DEFINE___PROGNAME,
  [Define if your platform defines __progname.])

AC_TRY_RUN([
extern char *__progname;

int main()
{
	char *p = __progname;
	
	return 0;
}], [AC_MSG_RESULT(yes)
	AC_DEFINE(CON_DEFINE___PROGNAME)],
	[AC_MSG_RESULT(no)])


# strlcat / strcpy

AC_CHECK_FUNC(strlcat, [], [AC_SUBST(PLATFORM_STRLCAT, Platform/strlcat.o)])
AC_CHECK_FUNC(strlcpy, [], [AC_SUBST(PLATFORM_STRLCPY, Platform/strlcpy.o)])


####################################################################################################
# C compiler
#

if [[ "$GCC" = "yes" ]]; then
	CFLAGS="-std=c99 -g -DNDEBUG -Wall -Wstrict-prototypes -Wmissing-prototypes -Wwrite-strings -Wpointer-arith -Wbad-function-cast -Wsign-compare $extra_cflags"

	AC_MSG_CHECKING([for gcc version])
	gcc_version=`$CC -v 2>&1 | grep "gcc version" | sed "s/gcc version //" | sed "s/ .*//"`
	AC_MSG_RESULT($gcc_version)

	# We now have to check what the safe optimisations for GCC are. This varies between versions
	# it seems.
	
	AC_MSG_CHECKING([for safe gcc optimisation level])
	found_opts=0
	
	case $gcc_version in
		3\.3* )
			# On GCC 3.3, optimisations work pretty much as advertised.
			$CC -v 2>&1 | grep "gcc version 3\.3" > /dev/null
			if [[ $? -eq 0 ]]; then
				AC_MSG_RESULT(-O3 -fno-strict-aliasing)
				CFLAGS="$CFLAGS -O3 -fno-strict-aliasing"
			fi;;
		
		4\.0* | 4\.1* | 4\.2*)
			# On GCC 4.*, we need to turn off both -fno-tree-copyrename -fno-expensive-optimizations. I have
			# no idea why.
			if [[ $? -eq 0 ]]; then
				AC_MSG_RESULT(-O2 -fno-strict-aliasing -fno-tree-copyrename -fno-expensive-optimizations)
				CFLAGS="$CFLAGS -O2 -fno-strict-aliasing -fno-tree-copyrename -fno-expensive-optimizations"
			fi;;
	
		* )
			AC_MSG_RESULT(none);;
	esac
else
	CFLAGS="-DNDEBUG"
fi


####################################################################################################
# Output
#

LIBS="$extra_libs"

AC_CONFIG_FILES([Makefile Makefile.inc compiler/Makefile vm/Version.h vm/Makefile lib/Makefile
	lib/Makefile.Stdlib bootstrap/Makefile tests/Makefile tests/threads/Makefile
	manuals/Makefile examples/Makefile examples/compile_time/Makefile examples/dsls/Makefile
	examples/metaclasses/Makefile tests/lang/Makefile tests/lang/namespaces/Makefile
    tests/threads/pthreads/Makefile tests/threads/single_thread/Makefile])
AC_OUTPUT


if [[ ! -f compiler/convergec ]]; then
	echo "copying over bootstrap compiler"
	cp $bootstrap_dir/convergec.bootstrap compiler/convergec
else
	echo "preserving existing bootstrap compiler"
fi

if [[ ! -f compiler/convergel ]]; then
	echo "copying over bootstrap linker"
	cp $bootstrap_dir/convergel.bootstrap compiler/convergel
else
	echo "preserving existing bootstrap linker"
fi
