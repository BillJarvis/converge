// Copyright (c) 2007 Laurence Tratt <laurie@tratt.net>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


//
// This file is based on an example from "DSL Implementation in MetaOCaml, Template Haskell, and
// C++" by Czarnecki, O'Donnell, Striegnitz, Taha.
//


import CEI, Sys




func expand_power(n, x):

	if n == 0:
		return [| 1 |]
	else:
		return [| $c{x} * $c{expand_power(n - 1, x)} |]



func mk_power(n):

	it := [|
		func (&x):
			return $c{expand_power(n, [| &x |])}
	|]
	
	Sys::println("mk_power(", n, ") generated:\n")
	Sys::println(CEI::itree_format(it))
	
	return it



power3 := $<mk_power(3)>



func main():

	Sys::println("3^3 = ", power3(3))
