// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import File, Parse_Options, Platform::Properties, Strings, Sys, VM
import Bytecode_Gen, Compiler_Vars, CV_Module, CV_Parser, IModule_Gen, Targets::Available, Tokenizer




class Compiler:

	func compile():
	
		self.includes := []
	
		options := Parse_Options::Options.new(self._useage_callback)
		options.add(Parse_Options::Option_Spec.new("output", "o", Parse_Options::MANDATORY, Parse_Options::TYPE_ANY, Parse_Options::FREQUENCY_ONE))
		options.add(Parse_Options::Option_Spec.new("bootstrap", "b", Parse_Options::NONE, Parse_Options::FREQUENCY_ZERO_OR_ONE))
		options.add(Parse_Options::Option_Spec.new("includes", "I", Parse_Options::MANDATORY, Parse_Options::TYPE_ANY, Parse_Options::FREQUENCY_ZERO_OR_MORE))
		options.add(Parse_Options::Option_Spec.new("optimise", "O", Parse_Options::NONE))
		options.add(Parse_Options::Option_Spec.new("target", "T", Parse_Options::MANDATORY, Parse_Options::TYPE_ANY, Parse_Options::FREQUENCY_ZERO_OR_ONE))
		
		self.bootstrap := 0
		target_name := Strings::format("%dbit", Properties::word_bits)
		internal_target_name := Strings::format("%dbit", Properties::word_bits)
		parsed, extra := options.parse()
		for option_name, option_val := parsed.iterate():
			ndif option_name == "output":
				self.output_path := option_val
			elif option_name == "bootstrap":
				self.bootstrap := 1
			elif option_name == "includes":
				self.includes := option_val
			elif option_name == "target":
				target_name := option_val
		
		if extra.len() == 0:
			self._useage_callback("Not enough arguments.")
		elif extra.len() > 1:
			self._useage_callback("Too many arguments.")

		self.target := self._target_name_to_target(target_name)
		self.internal_target := self._target_name_to_target(internal_target_name)

		if self.bootstrap == 1:
			// We're in bootstrapping mode. We now have to do some fun stuff with module identifiers.
			//
			// The first thing we need to know is that module ids are based on the fully
			// canonicalised pathname of the corresponding .cv file.
			//
			// The basic problem is quite subtle. The bootstrap compiler contains references to "old"
			// module ids (i.e. old pathnames). Because of e.g. quasi-quotes, some of these old
			// module ids can "leak" into the new output. This then means that the output of the
			// compiler contains invalid module ids which can lead to linker or import errors.
			//
			// In bootstrapping mode we therefore have to carefully convert (sometimes one way,
			// sometimes the other) between old and new module ids to ensure that the running
			// compiler is only dealing with old module ids, but that the output contains only new
			// module ids.
			
			existing_mod_ids := []
			for mod_id := VM::vm.modules.keys():
				if not Compiler_Vars::BUILTIN_MODULES.find(mod_id):
					existing_mod_ids.append(mod_id)
			
			self.original_lc_top_level_path := Strings::lcp(existing_mod_ids)
			if self.original_lc_top_level_path.len() == 0:
				// Sanity check failed.
				raise "XXX"
		
			self.top_level_path := File::canon_path(File::join_names(File::split_leaf(Sys::program_path)[0], ".."))
			
			imodule_cv_path := File::canon_path(File::join_names(self.top_level_path, "compiler", "Compiler", "IModule_Gen.cv"))
			if not File::exists(imodule_cv_path) | not imodule_cv_path[ : self.top_level_path.len()] == self.top_level_path:
				// Sanity checks failed.
				raise "XXX"

		self.src_path := extra[0]
		if not File::exists(self.src_path):
			self.error(Strings::format("Source file '%s' not found.", self.src_path))

		self.module_id := File::canon_path(extra[0])

		if (input_file_dir := File::split_leaf(self.src_path)[0]) == "":
			self.includes.insert(0, ".")
		else:
			self.includes.insert(0, input_file_dir)

		// For the moment, we assume the compiled module name is simply the leaf name (minus its
		// extension). On platforms with non-case preserving filesystems, perhaps there is a need
		// for a more sophisticated mechanism?
		
		self.src_module_name := File::split_ext(File::split_leaf(self.src_path)[1])[0]

		// In order to make a good stab at finding the Converge library we check in order:
		//
		//   ../lib/converge-<version>
		//   ../lib/converge
		//   ../lib
		//
		// where ".." is relative to the directory convergec was contained in.
		
		bin_dir := File::split_leaf(Sys::program_path)[0]
		lib_path_candidates := [File::join_names(bin_dir, "..", "lib", "converge-" + Sys::version), File::join_names(bin_dir, "..", "lib", "converge"), File::join_names(bin_dir, "..", "lib")]
		for lib_path := lib_path_candidates.iterate():
			if File::exists(lib_path):
				self.includes.append(File::canon_path(lib_path))
				break
		exhausted:
			self.error("Can't find Converge library.")

		// In order to make a good stab at finding the Compiler package we check in order:
		//
		//   ./Compiler
		//   ../lib/Compiler
		//
		// where ".." is relative to the directory convergec was contained in.
		
		compiler_path_candidates := [File::join_names(bin_dir, "Compiler"), File::join_names(lib_path, "Compiler")]
		for lib_path := compiler_path_candidates.iterate():
			if File::exists(lib_path):
				self.includes.append(File::canon_path(File::join_names(lib_path, "..")))
				break
		exhausted:
			self.error("Can't find Compiler package.")
		
		src_file := File::open(self.src_path, "r")
		src_data := src_file.read()
		src_file.close()
		
		self.tokenizer := Tokenizer::Tokenizer.new()
		parse_tree := CV_Parser::parse(src_data)
		
		imodule := IModule_Gen::IModule_Gen.new().generate(parse_tree)
		bytecode := Bytecode_Gen::Bytecode_Gen.new().generate(imodule, self.target).serialize()
		
		output_file := File::File.new(self.output_path, "w")
		output_file.write(bytecode)
		


	func _useage_callback(msg):
	
		if not msg is null:
			Sys::stderr.writeln(Strings::format("Error: %s", msg))
		Sys::stderr.writeln("Usage: convergec [-I <include> [-I <include> ...]] [-O] [-T <target bit size>] -o <output> <input>")
		if not msg is null:
			Sys::exit(1)



	func error(msg, src_infos := null):
	
		self._print_msg("Error", msg, src_infos)
		Sys::exit(1)



	func warning(msg, src_infos := null):
	
		self._print_msg("Warning", msg, src_infos)
		Sys::exit(1)
	
	
	
	func _print_msg(pre_msg, msg, src_infos := null):
	
		if not src_infos is null:
			if src_infos.len() == 1 & src_infos[0][0] := self.module_id:
				src_offset := src_infos[0][1]
				newlines := self.tokenizer.newlines
				i := 0
				while i < newlines.len():
					if src_offset < newlines[i]:
						break
					i += 1
				col := src_offset - newlines[i - 1]
				Sys::stderr.writeln(Strings::format("%s: Line %d, column %d: %s", pre_msg, i, col, msg))
			else:
				Sys::stderr.writeln(Strings::format("%s:", pre_msg))
				for i := 0.to(src_infos.len()):
					module_id, src_offset := src_infos[i]
					if module_id != self.module_id:
						raise "XXX"
					newlines := self.tokenizer.newlines
					i := 0
					while i < newlines.len():
						if src_offset < newlines[i]:
							break
						i += 1
					col := src_offset - newlines[i - 1]
					Sys::stderr.writeln(Strings::format("  Line %d, column %d ", i, col))
				
				Sys::stderr.writeln(msg)
		else:
			Sys::stderr.writeln(Strings::format("%s: %s", pre_msg, msg))
					


	func find_import_location(import_name_list):

		func match_path(i, dir):
		
			cnd_path := File::join_names(dir, import_name_list[i])

			if File::exists(cnd_path) & File::is_dir(cnd_path):
				if i + 1 == import_name_list.len():
					return [cnd_path, i]
				else:
					return match_path(i + 1, cnd_path)

			cnd_file_path := File::join_ext(cnd_path, CV_Module::CV_EXTENSION)
			if File::exists(cnd_file_path) & File::is_file(cnd_file_path):
				return [cnd_file_path, i]
			
			return fail
			
	
		for include_dir := self.includes.iterate():
			if matched_path, extra_pos := match_path(0, include_dir):
				import_full_name := File::canon_path(matched_path)
				import_extras := import_name_list[extra_pos + 1 : ]
				break
		exhausted:
			if Compiler_Vars::BUILTIN_MODULES.find(import_name_list[0]):
				import_full_name := import_name_list[0]
				import_extras := import_name_list[1 : ]
			else:
				return fail
		
		return [import_full_name, import_extras]



	func _target_name_to_target(target_name):

		if not Available::TARGETS.find(target_name):
			self.error(Strings::format("No support yet for target '%s'.", target_name))

		return Available::TARGETS[target_name]



func main():

	compiler := Compiler.new()
	Compiler_Vars::push_compiler(compiler)
	compiler.compile()
	Compiler_Vars::pop_compiler()
