// Copyright (c) 2011 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.




import Sys




class Instrs_Opt:

    func optimise(self, code_gen):
    
        self._code_gen := code_gen
        self._constant_fold()



    func _instrs_replace(self, i, j, new_instrs):
        
        self._code_gen._instructions[i : j] := new_instrs
        if j - i == new_instrs.len():
            return

        labels := self._code_gen._labels
        for name, off := labels.iter():
            if off is null:
                continue
            if off > i:
                labels[name] := off - ((j - i) - new_instrs.len())



    func _constant_fold(self):
    
        i := 0
        target := self._code_gen._target
        instrs := self._code_gen._instructions
        consts := self._code_gen._constants
        while i < instrs.len():
            instr := instrs[i]
            if target.Instr_Sub.instantiated(instr) \
              | target.Instr_Add.instantiated(instr):
                lhs := instrs[i - 2]
                rhs := instrs[i - 1]
                if target.Instr_Constant_Get.instantiated(lhs) & \
                  target.Instr_Constant_Get.instantiated(rhs):
                    if consts[lhs.constant_num][0] == consts[rhs.constant_num][0]:
                        lhs_val := consts[lhs.constant_num][1]
                        rhs_val := consts[rhs.constant_num][1]
                        ndif target.Instr_Sub.instantiated(instr):
                            new_val := lhs_val - rhs_val
                        elif target.Instr_Add.instantiated(instr):
                            new_val := lhs_val + rhs_val
                        self._code_gen._constant_get(consts[lhs.constant_num][0], new_val, instr.src_infos)
                        new_instr := instrs.pop()
                        self._instrs_replace(i - 2, i + 1, [new_instr])
                        i -= 2
                        continue
            
            i += 1