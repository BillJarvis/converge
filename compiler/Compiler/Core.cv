// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


//
// This module contains shared parts of the compiler that don't naturally fit elsewhere.
//


import Exceptions, File, Platform::Host, Platform::Properties, Strings, Sys




////////////////////////////////////////////////////////////////////////////////////////////////////
// Shared information between different Converge compilers
//

// Closure triples

CLOSURE_VARS := 0
CLOSURE_RENAMES := 1
CLOSURE_IMPORTS := 2



// The default variables in scope in every Converge module.

DEFAULT_VARS := Set{"self_module", "null"}



// Builtin modules

BUILTIN_MODULES := Set{"Sys", "Backtrace", "Builtins", "POSIX_File", "Array", "OS", "Exceptions", "C_Earley_Parser", "PCRE", "VM", "Processes", "PThreads", "CEI", "C_Strings", "Thread", "libXML2", "Random", "C_Platform_Properties", "C_Platform_Env", "C_Platform_Exec", "C_Time", "C_Platform_Host", "Curses"}




////////////////////////////////////////////////////////////////////////////////////////////////////
// Compiler stack
//

_compilers := []

func push_compiler(compiler):

    _compilers.append(compiler)



func peek_compiler():

    return _compilers[-1]



func pop_compiler():

    _compilers.pop()



func head_compiler():

    return _compilers[0]



func iter_compilers():

    for yield _compilers.iter()
    
    fail



func num_compilers():

    return _compilers.len()




////////////////////////////////////////////////////////////////////////////////////////////////////
// Filename extension handling
//

// The file name extension of a normal Converge file.

SRC_EXT := "cv"

// The file name extension of a Converge bytecode file.

CACHE_EXT := "cvb"

// File name extension of library files.

LIB_EXT := "cvl"



//
// For a given module or packages path, return the cached bytecode path.
//

func get_cache_path(path):

    name, ext := File::split_ext(path)
    if ext == SRC_EXT:
        // Rename module M.cv to M.cvb
        return File::join_ext(name, CACHE_EXT)
    else:
        // Rename package P to P.cvb
        return File::join_ext(path, CACHE_EXT)
    
    return path





////////////////////////////////////////////////////////////////////////////////////////////////////
// Fresh names
//

UNIQUE_NAME_PREFIX := "$$"
UNIQUE_EVAL_NAME_TEMPLATE := "$$eval$$%s"
UNIQUE_NAME_TEMPLATE := "$$%s$$"
UNIQUE_NAME_EXTRA_TEMPLATE := "$$%s$$%s$$"
QUASI_QUOTES_NAME := "$$qq$$%s$$"



_fresh_name_counter := 0

func fresh_name(name := null):

    nonlocal _fresh_name_counter
    
    _fresh_name_counter += 1
    
    if name is null:
        return Strings::format(UNIQUE_NAME_TEMPLATE, (_fresh_name_counter - 1).to_str())
    else:
        return Strings::format(UNIQUE_NAME_EXTRA_TEMPLATE, (_fresh_name_counter - 1).to_str(), name)




////////////////////////////////////////////////////////////////////////////////////////////////////
// Location of standard libraries
//

func get_std_libraries(comp_link):

    bin_dir := File::split_leaf(Sys::vm_path)[0]
    
    libraries := []

    // Find Compiler.cvl.

    cnd_dirs := [File::join_names(bin_dir, "..", "lib", "converge-" + Sys::version), \
      File::join_names(bin_dir, "..", "lib", "converge"), \
      File::join_names(bin_dir, "..", "compiler"), \
      File::join_names(bin_dir)]
    for cnd_dir := cnd_dirs.iter():
        cnd_path := File::join_names(cnd_dir, "Compiler.cvl")
        if File::exists(cnd_path):
            libraries.append(File::canon_path(cnd_path))
            break

    // Find Stdlib.cvl

    cnd_dirs := [File::join_names(bin_dir, "..", "lib", "converge-" + Sys::version), \
      File::join_names(bin_dir, "..", "lib", "converge"), \
      File::join_names(bin_dir, "..", "lib")]
    for cnd_dir := cnd_dirs.iter():
        cnd_path := File::join_names(cnd_dir, "Stdlib.cvl")
        if File::exists(cnd_path):
            libraries.append(File::canon_path(cnd_path))
            break

    return libraries




////////////////////////////////////////////////////////////////////////////////////////////////////
// Mod ids
//

func mk_mod_id(src_path):

    if Properties::case_sensitive_filenames == 0:
        // On operating systems which are case insensitive (but presumably case preserving), mod
        // IDs need to be lower cased so that they can be compared even when files have different
        // capitilizations. Of course there is still potential for hilarity if some filing
        // systems on these OSs are case sensitive, but there's only so much one can cope with.
        src_path := src_path.lower_cased()

    return Strings::format("%s:%s", Host::get_hostname(), src_path)
