// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import File, Functional, Strings
import Core, ITree




_INDENT_STRING := "\t"

_NEST_CLASS := 0
_NEST_FUNC := 1




class ITree_PP:

	func pp(self, itree):
	
		self._indent_level := 0

		// We need to track when we're dealing with class fields or not so that we can be intelligent
		// about printing "bound_func", "unbounc_func" or - hopefully! - just "func".

		self._nesting := []
		
		return self._preorder(itree)



	func _preorder(self, node):
	
		return self.get_slot("_t_" + node.instance_of.name.lower_cased())(node)



	func _t_imodule(self, node):
	
		return Strings::join(Functional::map(func (x) { return self._preorder(x) }, node.defns), "\n")



	func _t_iclass_defn(self, node):

		supers := Strings::join(Functional::map(func (x) { return self._preorder(x) }, node.supers), ", ")
		if node.metaclass_ is null:
			metaclass_ := "Class"
		else:
			metaclass_ := self._preorder(node.metaclass_)

		self._indent_level += 1
		self._nesting.append(_NEST_CLASS)
		fields := []
		for field := node.fields.iter():
			fields.append(self._preorder(field))
		self._nesting.pop()
		self._indent_level -= 1

		indent := _INDENT_STRING * (self._indent_level + 1)

		return Strings::format("""class %s(%s) metaclass %s:

%s%s""", node.class_name, supers, metaclass_, indent, Strings::join(fields, "\n" + indent))



	func _t_ifunc_defn(self, node):

		pp := []

		if self._nesting.len() == 0 | self._nesting[-1] == _NEST_FUNC:
			if node.is_bound == 0:
				pp.append("func ")
			else:
				pp.append("bound_func ")
		else:
			if node.is_bound == 1:
				pp.append("func ")
			else:
				pp.append("unbound_func ")

		if not node.func_name is null:
			pp.append(self._preorder(node.func_name))

		pp.append("(")
		pp.append(Strings::join(Functional::map(self._preorder, node.params), ", "))
		if not node.var_arg is null:
			if node.params.len() > 0:
				pp.append(", ")
			pp.append("*")
			pp.append(self._preorder(node.var_arg))
		pp.append("):")
		
		nonlocals := []
		for nonlocal_ := node.nonlocals.iter():
			nonlocals.append(self._preorder(nonlocal_))
		if nonlocals.len() > 0:
			pp.append("\n")
			pp.append(_INDENT_STRING * (self._indent_level + 1))
			pp.append("nonlocal ")
			pp.append(Strings::join(nonlocals, ", "))

		if node.renames.len() != 0:
			raise "XXX"
		
		self._indent_level += 1
		self._nesting.append(_NEST_FUNC)
		body := self._preorder(node.body)
		self._nesting.pop()
		self._indent_level -= 1

		pp.append("\n")
		pp.append(_INDENT_STRING * (self._indent_level + 1))
		pp.append(body)
		
		return Strings::join(pp, "")



	func _t_iif(self, node):
	
		pp := []
		for i := 0.iter_to(node.clauses.len()):
			if i == 0:
				pp.append("if ")
			else:
				pp.append(Strings::format("\n%selif ", _INDENT_STRING * self._indent_level))
			self._indent_level += 1
			pp.append(Strings::format("%s:", self._preorder(node.clauses[i].condition)))
			pp.append("\n" + (_INDENT_STRING * self._indent_level))
			pp.append(self._preorder(node.clauses[i].body))
			self._indent_level -= 1
		if not node.else_body is null:
			pp.append(Strings::format("\n%selse:\n%s", _INDENT_STRING * self._indent_level, _INDENT_STRING * (self._indent_level + 1)))
			self._indent_level += 1
			pp.append(self._preorder(node.else_body))
			self._indent_level -= 1
		
		return Strings::join(pp, "")



	func _t_indif(self, node):

		pp := []
		for i := 0.iter_to(node.clauses.len()):
			if i == 0:
				pp.append("ndif ")
			else:
				pp.append(Strings::format("\n%selif ", _INDENT_STRING * self._indent_level))
			self._indent_level += 1
			pp.append(Strings::format("%s:", self._preorder(node.clauses[i].condition)))
			pp.append("\n" + (_INDENT_STRING * self._indent_level))
			pp.append(self._preorder(node.clauses[i].body))
			self._indent_level -= 1

		return Strings::join(pp, "")
	


	func _t_iimport(self, node):
	
		mod_path := Strings::split(node.mod_path, "::")
		
		if node.var_name != mod_path[0]:
			return Strings::format("import %s as %s", node.mod_path, node.var_name)
		else:
			return Strings::format("import %s", node.mod_path)



	func _t_ivar(self, node):
	
		return node.name



	func _t_iwhile(self, node):

		pp := ["while ", self._preorder(node.condition)]

		if not node.body is null:
			self._indent_level += 1
			pp.append(":\n" + (_INDENT_STRING * self._indent_level))
			pp.append(self._preorder(node.body))
			self._indent_level -= 1

			if not node.exhausted_body is null:
				pp.append(Strings::format("\n%sexhausted:\n%s", _INDENT_STRING * self._indent_level, _INDENT_STRING * (self._indent_level + 1)))
				self._indent_level += 1
				pp.append(self._preorder(node.exhausted_body))
				self._indent_level -= 1

			if not node.broken_body is null:
				pp.append(Strings::format("\n%sbroken:\n%s", _INDENT_STRING * self._indent_level, _INDENT_STRING * (self._indent_level + 1)))
				self._indent_level += 1
				pp.append(self._preorder(node.broken_body))
				self._indent_level -= 1

		return Strings::join(pp, "")



	func _t_ifor(self, node):

		pp := ["for ", self._preorder(node.condition)]

		if not node.body is null:
			self._indent_level += 1
			pp.append(":\n" + (_INDENT_STRING * self._indent_level))
			pp.append(self._preorder(node.body))
			self._indent_level -= 1

			if not node.exhausted_body is null:
				pp.append(Strings::format("\n%sexhausted:\n%s", _INDENT_STRING * self._indent_level, _INDENT_STRING * (self._indent_level + 1)))
				self._indent_level += 1
				pp.append(self._preorder(node.exhausted_body))
				self._indent_level -= 1

			if not node.broken_body is null:
				pp.append(Strings::format("\n%sbroken:\n%s", _INDENT_STRING * self._indent_level, _INDENT_STRING * (self._indent_level + 1)))
				self._indent_level += 1
				pp.append(self._preorder(node.broken_body))
				self._indent_level -= 1

		return Strings::join(pp, "")



	func _t_itry(self, node):

		pp := ["try:\n"]
		
		self._indent_level += 1
		pp.append(_INDENT_STRING * self._indent_level)
		pp.append(self._preorder(node.body))
		self._indent_level -= 1
		
		for catch_ := node.catches.iter():
			pp.append("\n")
			pp.append(_INDENT_STRING * self._indent_level)
			pp.append("catch ")
			pp.append(self._preorder(catch_.expr))
			if not catch_.var is null:
				pp.append(" into ")
				pp.append(self._preorder(catch_.var))
			pp.append(":\n")
			self._indent_level += 1
			pp.append(_INDENT_STRING * self._indent_level)
			pp.append(self._preorder(catch_.body))
			self._indent_level -= 1

		return Strings::join(pp, "")



	func _t_iint(self, node):
	
		return Strings::format("%d", node.val)



	func _t_ilist(self, node):

		return Strings::format("[%s]", Strings::join(Functional::map(self._preorder, node.elems), ", "))



	func _t_idict(self, node):

		elems := Functional::map(func (e) { return Strings::format("%s : %s", self._preorder(e[0]), self._preorder(e[1])) }, node.elems)

		return Strings::format("Dict{%s}", Strings::join(elems, ", "))



	func _t_iset(self, node):

		return Strings::format("Set{%s}", Strings::join(Functional::map(self._preorder, node.elems), ", "))



	func _t_istring(self, node):
	
		return Strings::format("\"%s\"", node.val)



	func _t_islot_lookup(self, node):

		return Strings::format("%s.%s", self._preorder(node.target), node.slot_name)



	func _t_imodule_lookup(self, node):

		return Strings::join(Functional::map(self._preorder, node.names), "::")



	func _t_ilist(self, node):
	
		return Strings::format("[%s]", Strings::join(Functional::map(self._preorder, node.elems), ", "))



	func _t_iapplication(self, node):
	
		return Strings::format("%s(%s)", self._preorder(node.target), Strings::join(Functional::map(self._preorder, node.args), ", "))



	func _t_iget(self, node):

		return Strings::format("%s[%s]", self._preorder(node.target), self._preorder(node.index))



	func _t_islice(self, node):

		if node.lower_bound is null & node.upper_bound is null:
			return Strings::format("%s[ : ]", self._preorder(node.target))
		elif node.lower_bound is null:
			return Strings::format("%s[ : %s]", self._preorder(node.target), self._preorder(node.upper_bound))
		elif node.upper_bound is null:
			return Strings::format("%s[%s : ]", self._preorder(node.target), self._preorder(node.lower_bound))
		else:
			return Strings::format("%s[%s : %s]", self._preorder(node.target), self._preorder(node.lower_bound), self._preorder(node.upper_bound))



	func _t_ireturn(self, node):
	
		if node.expr is null:
			return "return"
		else:
			return Strings::format("return %s", self._preorder(node.expr))



	func _t_iyield(self, node):

		return Strings::format("yield %s", self._preorder(node.expr))



	func _t_iraise(self, node):

		return Strings::format("raise %s", self._preorder(node.expr))



	func _t_ifail(self, node):

		return "fail"



	func _t_iassert(self, node):

		return Strings::format("assert %s", self._preorder(node.expr))



	func _t_ibreak(self, node):

		return "break"



	func _t_icontinue(self, node):

		return "continue"



	func _t_iconjunction(self, node):
	
		return Strings::join(Functional::map(self._preorder, node.exprs), " & ")



	func _t_ialternation(self, node):
	
		return Strings::join(Functional::map(self._preorder, node.exprs), " | ")



	func _t_inot(self, node):

		return Strings::format("not %s", self._preorder(node.expr))



	func _t_iassignment(self, node):
	
		if node.type == ITree::STD_ASSIGN:
			op := ":="
		elif node.type == ITree::ADD_ASSIGN:
			op := "+="
		elif node.type == ITree::SUB_ASSIGN:
			op := "-="
		elif node.type == ITree::MUL_ASSIGN:
			op := "*="
		elif node.type == ITree::DIV_ASSIGN:
			op := "/="
		
		return Strings::format("%s %s %s", Strings::join(Functional::map(self._preorder, node.targets), ", "), op, self._preorder(node.expr))



	func _t_icomparison(self, node):
	
		if node.type == ITree::IS_COMPARISON:
			op := "is"
		elif node.type == ITree::EQ_COMPARISON:
			op := "=="
		elif node.type == ITree::NEQ_COMPARISON:
			op := "!="
		elif node.type == ITree::LEQ_COMPARISON:
			op := "<="
		elif node.type == ITree::GEQ_COMPARISON:
			op := ">="
		elif node.type == ITree::LE_COMPARISON:
			op := "<"
		elif node.type == ITree::GE_COMPARISON:
			op := ">"
	
		return Strings::format("%s %s %s", self._preorder(node.lhs), op, self._preorder(node.rhs))



	func _t_ipass(self, node):

		return "pass"



	func _t_ibinary(self, node):

		if node.type == ITree::BINARY_ADD:
			op := "+"
		elif node.type == ITree::BINARY_SUB:
			op := "-"
		elif node.type == ITree::BINARY_MUL:
			op := "*"
		elif node.type == ITree::BINARY_DIV:
			op := "/"
		elif node.type == ITree::BINARY_MOD:
			op := "%"
	
		return Strings::format("%s %s %s", self._preorder(node.lhs), op, self._preorder(node.rhs))



	func _t_imod_id_import(self, node):
	
		return Strings::format("$<CEI::imod_id_import(\"%s\", \"%s\")>", node.mod_id, node.src_path)



	func _t_iexpr_seq(self, node):

		pp := []
		for expr := node.exprs.iter():
			pp.append(self._preorder(expr))
		
		return Strings::join(pp, "\n" + (_INDENT_STRING * self._indent_level))

		
		
	func _t_iparam(self, node):
	
		if not node.default is null:
			return Strings::format("%s := %s", self._preorder(node.var), self._preorder(node.default))
		else:
			return self._preorder(node.var)




func pp(itree):

	return ITree_PP.new().pp(itree)
