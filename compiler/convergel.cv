// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Array, Builtins, File, Maths, Parse_Options, Platform::Properties, Strings, Sys, VM
import Compiler::Compiler_Vars, Compiler::CV_Exec, Compiler::CV_Module, Compiler::CV_Library, Compiler::Link, Compiler::Mk_Packages, Compiler::Targets::Available





class Linker:

	func link(self):
	
		self.includes := []
	
		options := Parse_Options::Options.new(self.usage)
		options.add(Parse_Options::Option_Spec.new("output", "o", Parse_Options::MANDATORY, Parse_Options::TYPE_ANY, Parse_Options::FREQUENCY_ONE))
		options.add(Parse_Options::Option_Spec.new("target", "T", Parse_Options::MANDATORY, Parse_Options::TYPE_ANY, Parse_Options::FREQUENCY_ZERO_OR_ONE))
		
		target_name := Strings::format("%dbit", Properties::word_bits)
		parsed_args, extra_args := options.parse()
		for option_name, option_val := parsed_args.iterate():
			if option_name == "output":
				output_path := option_val
			elif option_name == "target":
				target_name := option_val
			else:
				raise "XXX"
		
		if extra_args.len() == 0:
			self.usage("Not enough arguments.")

		target := self.target_name_to_target(target_name)
		
		input_paths := extra_args
		input_paths.extend(Compiler_Vars::get_std_libraries())

		cv_mods := []
		for input_path := extra_args.iterate():
			input_path := File::canon_path(input_path)
			input_file := File::open(input_path, "r")
			input_file_data := input_file.read()
			assert(CV_Library::LIBRARY_INIT_STRING.len() == CV_Module::MODULE_INIT_STRING.len())
			file_type := input_file_data[ : CV_Library::LIBRARY_INIT_STRING.len()]
			
			if file_type == CV_Library::LIBRARY_INIT_STRING:
				library := CV_Library::CV_Library.new(target)
				for cv_mod := library.deserialize(input_file_data).iterate():
					cv_mods.append(cv_mod)
			elif file_type == CV_Module::MODULE_INIT_STRING:
				cv_mod := CV_Module::CV_Module.new(target)
				cv_mod.deserialize_str(input_file_data)
				cv_mods.append(cv_mod)
			else:
				self.error(Strings::format("File '%s' is not of a known type.", input_path))

		ser_cv_exec := Link::link_exec(cv_mods, self, target)

		output_file := File::File.new(output_path, "w")
		output_file.write(ser_cv_exec)
		output_file.close()
		File::chmod(output_path, 493)



	func library_link(self):
	
		self.includes := []
	
		options := Parse_Options::Options.new(self.usage)
		options.add(Parse_Options::Option_Spec.new("library_mode", "l", Parse_Options::NONE, Parse_Options::TYPE_ANY, Parse_Options::FREQUENCY_ONE))
		options.add(Parse_Options::Option_Spec.new("output", "o", Parse_Options::MANDATORY, Parse_Options::TYPE_ANY, Parse_Options::FREQUENCY_ONE))
		options.add(Parse_Options::Option_Spec.new("target", "T", Parse_Options::MANDATORY, Parse_Options::TYPE_ANY, Parse_Options::FREQUENCY_ZERO_OR_ONE))
		
		target_name := Strings::format("%dbit", Properties::word_bits)
		parsed_args, extra_args := options.parse()
		for option_name, option_val := parsed_args.iterate():
			if option_name == "library_mode":
				pass
			elif option_name == "output":
				output_path := option_val
			elif option_name == "target":
				target_name := option_val
			else:
				raise "XXX"
		
		if extra_args.len() == 0:
			self.usage("Not enough arguments.")

		target := self.target_name_to_target(target_name)

		modules := []
		for input_path := extra_args.iterate():
			input_path := File::canon_path(input_path)
			input_file := File::open(input_path, "r")
			input_file_data := input_file.read()
			assert(CV_Library::LIBRARY_INIT_STRING.len() == CV_Module::MODULE_INIT_STRING.len())
			file_type := input_file_data[ : CV_Library::LIBRARY_INIT_STRING.len()]
			
			if file_type == CV_Library::LIBRARY_INIT_STRING:
				library := CV_Library::CV_Library.new(target)
				for cv_mod := library.deserialize(input_file_data).iterate():
					modules.append(cv_mod.serialize())
			elif file_type == CV_Module::MODULE_INIT_STRING:
				modules.append(input_file_data)

		// In one sense, the following should belong in CV_Library::CV_Library.serialize. But by
		// doing it here we can forego the pointless string -> array -> string conversion.

		library := Array::Array.new(target.ARRAY_TYPE)
		library.extend_from_string(CV_Library::LIBRARY_INIT_STRING)
		library.append(CV_Library::LIBRARY_VERSION)

		library.append(modules.len())
		
		offsets := Array::Array.new(target.ARRAY_TYPE)
		serialized_modules := Array::Array.new(target.ARRAY_TYPE)
		for module := modules.iterate():
			offsets.append((library.len() + modules.len() + serialized_modules.len()) * target.WORDSIZE)
			serialized_modules.extend_from_string(module)
		
		library.extend(offsets)
		library.extend(serialized_modules)		
		
		output_file := File::File.new(output_path, "w")
		output_file.write(library.serialize())



	func usage(self, msg):

		Sys::stderr.writeln(Strings::format("Error: %s", msg))
		Sys::stderr.writeln("Usage: convergel [-l] -o <output> <input> [... <input>]")
		Sys::exit(1)



	func error(self, msg, src_infos := null):

		self.print_msg("Error", msg, src_infos)
		Sys::exit(1)



	func warning(self, msg, src_infos := null):

		self.print_msg("Warning", msg, src_infos)



	func print_msg(self, pre_msg, msg, src_infos := null):

		if not src_infos is null:
			Sys::stderr.writeln(Strings::format("%s:", pre_msg))
			for src_info := src_infos.iterate():
				mod := Builtins::Module.new(self.modules[src_info[0]][0].serialize())
				line, col := mod.src_offset_to_line_column(src_info[1])
				
				Sys::stderr.writeln(Strings::format("  %s, line %d, column %d", src_info[0], line, col))

			Sys::stderr.writeln(msg)
		else:
			Sys::stderr.writeln(Strings::format("%s: %s", pre_msg, msg))



	func target_name_to_target(self, target_name):

		if not Available::TARGETS.find(target_name):
			self.error(Strings::format("No support yet for target '%s'.", target_name))

		return Available::TARGETS[target_name].new()



	//
	// Translates lists of bytecode src infos of the form [<import num>, <offset>] to proper src
	// infos of the form [<module id>, <offset>].
	//

	func _tn_src_infos(self, src_infos, mod):
	
		new_src_infos := []
		for mod_num, offset := src_infos.iterate():
			if mod_num == -1:
				new_src_infos.append([mod.get_identifier(), offset])
			else:
				new_src_infos.append([mod.get_imports()[mod_num], offset])

		return new_src_infos




func main():

	if Sys::argv.len() > 1 & Sys::argv[0] == "-l":
		Linker.new().library_link()
	else:
		Linker.new().link()
