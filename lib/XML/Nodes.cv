import Builtins, Strings




class Document(Builtins::List):

	func get_root_elem():
	
		for elem := self.iterate():
			if Element.instantiated(elem):
				return elem
		
		raise "XXX"




class Attribute:

	func init(name, value, prefix := "", namespace := ""):
	
		if (prefix == "" & namespace != "") | (prefix != "" & namespace == ""):
			raise "XXX"
	
		self.name := name
		self.value := value
		self.prefix := prefix
		self.namespace := namespace
	
	
	
	func hash():
	
		return Strings::format("%s:%s", self.prefix, self.name).hash()




class Element(Builtins::List):

	func init(name, attrs, prefix := "", namespace := ""):
	
		self.name := name
		self._attr_namespaces := Dict{}
		for attr := attrs.iterate():
			if not (namespace := self._attr_namespaces.find(attr.namespace)):
				self._attr_namespaces[attr.namespace] := namespace := Dict{}
			namespace[attr.name] := attr
		self.prefix := prefix
		self.namespace := namespace



	func find_attr(name, namespace := ""):
	
		if not (namespace := self._attr_namespaces.find(namespace)):
			return fail
		else:
			return namespace.find(name)



	func get_attr(name, namespace := ""):
	
		return self._attr_namespaces[namespace][name]



	func attrs_iterate():
	
		for x, attrs := self._attr_namespaces.iterate():
			for name, attr := attrs.iterate():
				yield attr
			
		return fail



	func iterate_elements():

		for node := self.iterate():
			if Element.instantiated(node):
				yield node

		return fail



	func get_first_element(name, namespace := ""):

		for node := self.iterate():
			if Element.instantiated(node) & node.name == "name" & node.namespace == namespace:
				return node

		return fail




class Text:

	func init(str):
	
		self.str := str



	func to_xml():
	
		str := self.str.replaced("&", "&amp;")
		str := str.replaced("<", "&lt;")
		str := str.replaced(">", "&gt;")
		str := str.replaced("'", "&apos;")
		str := str.replaced("\"", "&quot;")
		
		return str
