// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Array, File




//

MOD_INIT_STR := "CONVMODL"
MODULE_VERSION := 0




class BC_Mod:

    func init(self, target):
    
        self._target := target
        
        self._cached_imports := null
        self._cached_top_level_vars_map := null
        self._cached_mod_lookups := null



    func deserialize_str(self, module_str):
    
        self.deserialize_array(Array::Array.new(self._target.ARRAY_TYPE, module_str))
    
    
    
    func deserialize_array(self, module):
    
        self._name := self._decode_string(module, module[self._target.MODULE_BYTECODE_NAME], module[self._target.MODULE_BYTECODE_NAME_SIZE])

        self._mod_id := self._decode_string(module, module[self._target.MODULE_BYTECODE_ID], module[self._target.MODULE_BYTECODE_ID_SIZE])

        self._src_path := self._decode_string(module, module[self._target.MODULE_BYTECODE_SRC_PATH], module[self._target.MODULE_BYTECODE_SRC_PATH_SIZE])
        
        self._instructions_bytecode := module[module[self._target.MODULE_BYTECODE_INSTRUCTIONS] / self._target.WORDSIZE : (module[self._target.MODULE_BYTECODE_INSTRUCTIONS] + module[self._target.MODULE_BYTECODE_INSTRUCTIONS_SIZE]) / self._target.WORDSIZE]

        self._imports := module[module[self._target.MODULE_BYTECODE_IMPORTS] / self._target.WORDSIZE : (module[self._target.MODULE_BYTECODE_IMPORTS] + module[self._target.MODULE_BYTECODE_IMPORTS_SIZE]) / self._target.WORDSIZE]
        self._num_imports := module[self._target.MODULE_BYTECODE_NUM_IMPORTS]
        
        self._src_infos := module[module[self._target.MODULE_BYTECODE_SRC_INFOS] / self._target.WORDSIZE : (module[self._target.MODULE_BYTECODE_SRC_INFOS] + module[self._target.MODULE_BYTECODE_SRC_INFOS_SIZE]) / self._target.WORDSIZE].serialize()
        
        self._newlines := module[module[self._target.MODULE_BYTECODE_NEWLINES] / self._target.WORDSIZE : (module[self._target.MODULE_BYTECODE_NEWLINES] / self._target.WORDSIZE) + module[self._target.MODULE_BYTECODE_NUM_NEWLINES]]
        
        self._top_level_vars_map := module[module[self._target.MODULE_BYTECODE_TOP_LEVEL_VARS_MAP] / self._target.WORDSIZE : (module[self._target.MODULE_BYTECODE_TOP_LEVEL_VARS_MAP] + module[self._target.MODULE_BYTECODE_TOP_LEVEL_VARS_MAP_SIZE]) / self._target.WORDSIZE]
        self._num_top_level_vars := module[self._target.MODULE_BYTECODE_NUM_TOP_LEVEL_VARS]
        
        self._constants_offsets := []
        for constant_offset := module[module[self._target.MODULE_BYTECODE_CONSTANTS_OFFSETS] / self._target.WORDSIZE : module[self._target.MODULE_BYTECODE_CONSTANTS_OFFSETS] / self._target.WORDSIZE + module[self._target.MODULE_BYTECODE_NUM_CONSTANTS]].iter():
            self._constants_offsets.append(constant_offset - module[self._target.MODULE_BYTECODE_INSTRUCTIONS])

        self._mod_lookups := module[module[self._target.MODULE_BYTECODE_MOD_LOOKUPS] / self._target.WORDSIZE : (module[self._target.MODULE_BYTECODE_MOD_LOOKUPS] + module[self._target.MODULE_BYTECODE_MOD_LOOKUPS_SIZE]) / self._target.WORDSIZE]
        self._num_mod_lookups := module[self._target.MODULE_BYTECODE_NUM_MOD_LOOKUPS]

        self._import_defns := module[module[self._target.MODULE_BYTECODE_IMPORT_DEFNS] / self._target.WORDSIZE : (module[self._target.MODULE_BYTECODE_IMPORT_DEFNS] / self._target.WORDSIZE) + module[self._target.MODULE_BYTECODE_NUM_IMPORT_DEFNS] * 2]



    func get_name(self):
    
        return self._name



    func set_name(self, name):
    
        return self._name := name



    func get_mod_id(self):
    
        return self._mod_id



    func set_mod_id(self, identifier):
    
        self._mod_id := identifier



    func get_src_path(self):
    
        return self._src_path



    func set_src_path(self, src_path):
    
        self._src_path := src_path



    func get_instructions_bytecode(self):
    
        return self._instructions_bytecode



    func set_instructions_bytecode(self, instructions_bytecode):
    
        self._instructions_bytecode := instructions_bytecode



    func get_imports(self):

        if not self._cached_imports is null:
            return self._cached_imports

        i := 0
        imports_pos := 0
        imports := []
        while i < self._num_imports:
            imp_mod_id_size := self._imports[imports_pos / self._target.WORDSIZE]
            imports_pos += self._target.WORDSIZE
            imp_mod_id := self._decode_string(self._imports, imports_pos, imp_mod_id_size)
            imports_pos += self._target.align(imp_mod_id_size)

            imp_src_path_size := self._imports[imports_pos / self._target.WORDSIZE]
            imports_pos += self._target.WORDSIZE
            imp_src_path := self._decode_string(self._imports, imports_pos, imp_src_path_size)
            imports_pos += self._target.align(imp_src_path_size)
            
            imports.append([imp_mod_id, imp_src_path])

            i += 1
        
        self._cached_imports := imports
        
        return imports



    func set_imports(self, imports):

        self._imports := Array::Array.new(self._target.ARRAY_TYPE)
        for imp_mod_id, imp_src_path := imports.iter():
            self._imports.append(imp_mod_id.len())
            self._imports.extend(self._target.b_aligned_string(imp_mod_id))
            self._imports.append(imp_src_path.len())
            self._imports.extend(self._target.b_aligned_string(imp_src_path))
        self._num_imports := imports.len()



    func get_src_infos(self):
    
        return self._target.decode_src_infos(self._src_infos)



    func set_src_infos(self, src_infos):
    
        self._src_infos := self._target.encode_src_infos(src_infos)



    func get_newlines(self):
    
        return self._newlines



    func set_newlines(self, newlines):
    
        self._newlines := newlines



    func get_top_level_vars_map(self):

        if not self._cached_top_level_vars_map is null:
            return self._cached_top_level_vars_map

        top_level_vars_map := Dict{}
        top_level_vars_pos := 0
        for i := 0.iter_to(self._num_top_level_vars):
            var_num := self._top_level_vars_map[(top_level_vars_pos / self._target.WORDSIZE) + self._target.BYTECODE_TOP_LEVEL_VAR_NUM]
            var_name_size := self._top_level_vars_map[(top_level_vars_pos / self._target.WORDSIZE) + self._target.BYTECODE_TOP_LEVEL_VAR_NAME_SIZE]
            var_name := self._decode_string(self._top_level_vars_map, top_level_vars_pos + self._target.BYTECODE_TOP_LEVEL_VAR_NAME * self._target.WORDSIZE, var_name_size)
            top_level_vars_map[var_name] := var_num
            top_level_vars_pos += self._target.align(var_name_size) + self._target.BYTECODE_TOP_LEVEL_VAR_NAME * self._target.WORDSIZE
        
        self._cached_top_level_vars_map := top_level_vars_map
        
        return top_level_vars_map



    func set_top_level_vars_map(self, top_level_vars_map):

        self._top_level_vars_map := Array::Array.new(self._target.ARRAY_TYPE)
        for var_name, var_num := top_level_vars_map.iter():
            self._top_level_vars_map.append(var_num)
            self._top_level_vars_map.append(var_name.len())
            self._top_level_vars_map.extend(self._target.b_aligned_string(var_name))
        self._num_top_level_vars := top_level_vars_map.len()



    func get_constants_offsets(self):
    
        return self._constants_offsets



    func set_constants_offsets(self, constants_offsets):
    
        self._constants_offsets := constants_offsets



    func get_mod_lookups(self):

        if not self._cached_mod_lookups is null:
            return self._cached_mod_lookups

        mod_lookups := []
        i := 0
        for 0.iter_to(self._num_mod_lookups):
            mod_num := self._mod_lookups[i / self._target.WORDSIZE]
            i += self._target.WORDSIZE
            defns := []
            num_defns := self._mod_lookups[i / self._target.WORDSIZE]
            i += self._target.WORDSIZE
            for 0.iter_to(num_defns):
                defn_len := self._mod_lookups[i / self._target.WORDSIZE]
                i += self._target.WORDSIZE
                defns.append(self._decode_string(self._mod_lookups, i, defn_len))
                i += self._target.align(defn_len)
            src_infos := []
            num_src_infos := self._mod_lookups[i / self._target.WORDSIZE]
            i += self._target.WORDSIZE
            for 0.iter_to(num_src_infos):
                src_infos.append([self._mod_lookups[i / self._target.WORDSIZE], self._mod_lookups[(i + self._target.WORDSIZE) / self._target.WORDSIZE]])
                i += 2 * self._target.WORDSIZE
            mod_lookups.append([mod_num, defns, src_infos])
        
        self._cached_mod_lookups := mod_lookups
        
        return mod_lookups



    func set_mod_lookups(self, mod_lookups):

        ar := Array::Array.new(self._target.ARRAY_TYPE)
        for mod_num, defns, src_infos := mod_lookups.iter():
            ar.append(mod_num)
            ar.append(defns.len())
            for defn := defns.iter():
                ar.append(defn.len())
                ar.extend(self._target.b_aligned_string(defn))
            ar.append(src_infos.len())
            ar.extend(src_infos.flattened())
        
        self._mod_lookups := ar
        self._num_mod_lookups := mod_lookups.len()



    func get_import_defns(self):
    
        import_defns := Dict{}
        i := 0
        while i < self._import_defns.len():
            import_defns[self._import_defns[i]] := self._import_defns[i + 1]
            i += 2
        
        return import_defns



    func set_import_defns(self, import_defns):
    
        self._import_defns := Array::Array.new(self._target.ARRAY_TYPE)
        for self._import_defns.extend(import_defns.iter())



    func serialize(self):
    
        module := Array::Array.new(self._target.ARRAY_TYPE)
        module.extend_from_string(MOD_INIT_STR)
        module.append(MODULE_VERSION)

        module.append(-1) // Absolute position of module name (in bytes)
        module.append(-1) // Size of module name (in bytes)
        module.append(-1) // Absolute position of mod id (in bytes)
        module.append(-1) // Size of mod id (in bytes)
        module.append(-1) // Absolute position of src path (in bytes)
        module.append(-1) // Size of src path (in bytes)
        module.append(-1) // Absolute position of program bytecode (in bytes)
        module.append(-1) // Size of program bytecode (in bytes)
        module.append(-1) // Absolute position of imports (in bytes)
        module.append(-1) // Size of imports (in bytes)
        module.append(-1) // Number of imports
        module.append(-1) // Absolute position of source code positions (in bytes)
        module.append(-1) // Size of source code positions (in bytes)
        module.append(-1) // Absolute position of new line positions (in bytes)
        module.append(-1) // Number of line positions
        module.append(-1) // Top level vars offset (in bytes)
        module.append(-1) // Size of top level vars (in bytes)
        module.append(-1) // Number of top level vars
        module.append(-1) // Absolute position of constants offsets (in bytes)
        module.append(-1) // Num constants
        module.append(-1) // Absolute position of module lookups (in bytes)
        module.append(-1) // Size of module lookups (in bytes)
        module.append(-1) // Number of module lookups
        module.append(-1) // Absolute position of import definitions (in bytes)
        module.append(-1) // Number of import definitions
        module.append(-1) // Size of all of the bytecode (in bytes)

        // Module name
        
        module[self._target.MODULE_BYTECODE_NAME] := module.len_bytes()
        module.extend(self._target.b_aligned_string(self._name))
        module[self._target.MODULE_BYTECODE_NAME_SIZE] := self._name.len()
        
        // Identifier
        
        module[self._target.MODULE_BYTECODE_ID] := module.len_bytes()
        module.extend(self._target.b_aligned_string(self._mod_id))
        module[self._target.MODULE_BYTECODE_ID_SIZE] := self._mod_id.len()

        // Src path
        
        module[self._target.MODULE_BYTECODE_SRC_PATH] := module.len_bytes()
        module.extend(self._target.b_aligned_string(self._src_path))
        module[self._target.MODULE_BYTECODE_SRC_PATH_SIZE] := self._src_path.len()

        // Instructions bytecode
        
        module[self._target.MODULE_BYTECODE_INSTRUCTIONS] := module.len_bytes()
        module.extend(self._instructions_bytecode)
        module[self._target.MODULE_BYTECODE_INSTRUCTIONS_SIZE] := module.len_bytes() - module[self._target.MODULE_BYTECODE_INSTRUCTIONS]
        
        // Imports
        
        module[self._target.MODULE_BYTECODE_IMPORTS] := module.len_bytes()
        module.extend(self._imports)
        module[self._target.MODULE_BYTECODE_IMPORTS_SIZE] := module.len_bytes() - module[self._target.MODULE_BYTECODE_IMPORTS]
        module[self._target.MODULE_BYTECODE_NUM_IMPORTS] := self._num_imports
        
        // Src info
        
        module[self._target.MODULE_BYTECODE_SRC_INFOS] := module.len_bytes()
        module.extend_from_string(self._src_infos)
        module[self._target.MODULE_BYTECODE_SRC_INFOS_SIZE] := module.len_bytes() - module[self._target.MODULE_BYTECODE_SRC_INFOS]

        // Newlines
        
        module[self._target.MODULE_BYTECODE_NEWLINES] := module.len_bytes()
        module.extend(self._newlines)
        module[self._target.MODULE_BYTECODE_NUM_NEWLINES] := self._newlines.len()
        
        // Top level variables map
        
        module[self._target.MODULE_BYTECODE_TOP_LEVEL_VARS_MAP] := module.len_bytes()
        module.extend(self._top_level_vars_map)
        module[self._target.MODULE_BYTECODE_TOP_LEVEL_VARS_MAP_SIZE] := module.len_bytes() - module[self._target.MODULE_BYTECODE_TOP_LEVEL_VARS_MAP]
        module[self._target.MODULE_BYTECODE_NUM_TOP_LEVEL_VARS] := self._num_top_level_vars
        
        // Constants offsets
        
        module[self._target.MODULE_BYTECODE_CONSTANTS_OFFSETS] := module.len_bytes()
        for constant_offset := self._constants_offsets.iter():
            module.append(constant_offset + module[self._target.MODULE_BYTECODE_INSTRUCTIONS])
        module[self._target.MODULE_BYTECODE_NUM_CONSTANTS] := self._constants_offsets.len()
        
        // Module lookups
        
        module[self._target.MODULE_BYTECODE_MOD_LOOKUPS] := module.len_bytes()
        module.extend(self._mod_lookups)
        module[self._target.MODULE_BYTECODE_MOD_LOOKUPS_SIZE] := module.len_bytes() - module[self._target.MODULE_BYTECODE_MOD_LOOKUPS]
        module[self._target.MODULE_BYTECODE_NUM_MOD_LOOKUPS] := self._num_mod_lookups

        // Import definitions
        
        module[self._target.MODULE_BYTECODE_IMPORT_DEFNS] := module.len_bytes()
        module.extend(self._import_defns)
        module[self._target.MODULE_BYTECODE_NUM_IMPORT_DEFNS] := self._import_defns.len() / 2

        module[self._target.MODULE_BYTECODE_SIZE] := module.len_bytes()

        return module.to_str()



    func _decode_string(self, module, start, size):

        return module[start / self._target.WORDSIZE : start / self._target.WORDSIZE + self._target.align(size) / self._target.WORDSIZE].to_str()[ : size]



//
// Succeeds if bc appears to be a valid Converge bytecode module.
//

func is_bc_mod(bc):

    if bc.prefixed_by(MOD_INIT_STR):
        return 1

    fail
