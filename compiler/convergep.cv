// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import File, Strings, Sys
import CPK::Earley::Grammar, CPK::Tree
import Compiler::Compiler_Vars, Compiler::CV_Parser, Compiler::Tokenizer



class Parser_Compiler:

	func init(self, path):

		file := File::File.new(path, "r")

		Compiler_Vars::push_compiler(self)

		self.tokenizer := Tokenizer::Tokenizer.new()
		self.tokenizer.tokenize(file.read(), [[path, 0]], [], [])
		tokens_map := Tokenizer::tokens_map([], [])
		grammar, rule_names := Grammar::compile(CV_Parser::GRAMMAR, "top_level", tokens_map)

		parse_tree := CV_Parser::CV_Parser.new().parse(grammar, rule_names, tokens_map, self.tokenizer.tokens)

		Compiler_Vars::pop_compiler()
		
		Sys::println(Tree::pp_tree(parse_tree))



	func error(self, msg, src_infos := null):
	
		self._print_msg("Error", msg, src_infos)
		Sys::exit(1)



	func warning(self, msg, src_infos := null):
	
		self._print_msg("Warning", msg, src_infos)
	
	
	
	func _print_msg(self, pre_msg, msg, src_infos := null):
	
		if not src_infos is null:
			assert src_infos.len() > 0

			Sys::stderr.write(Strings::format("%s: ", pre_msg))

			for src_info := src_infos.iterate():
				src_offset := src_info[1]
				newlines := self.tokenizer.newlines
				line := 0
				while line < newlines.len():
					if src_offset < newlines[line]:
						break
					line += 1
				col := src_offset - newlines[line - 1]
				
				Sys::stderr.write(Strings::format("Line %d, column %d: ", line, col))

			Sys::stderr.writeln(msg)
		else:
			Sys::stderr.writeln(Strings::format("%s: %s", pre_msg, msg))



func main():

	for path := Sys::argv.iterate():
		Parser_Compiler.new(path)
