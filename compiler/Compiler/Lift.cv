// Copyright (c) 2007 Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Builtins, Exceptions, Strings, Thread
import ITree




func lift(obj, src_infos := null):

	if src_infos is null:
		src_infos := Thread::get_continuation_src_infos(2)
	else:
		src_infos += Thread::get_continuation_src_infos(2)

	if obj is null:
		return ITree::IVar.new("null", src_infos)
	elif Builtins::String.conformed_by(obj):
		return ITree::IString.new(obj, src_infos)
	elif Builtins::Int.conformed_by(obj):
		return ITree::IInt.new(obj, src_infos)
	elif Builtins::List.conformed_by(obj):
		elems := []
		for e := obj.iter():
			elems.append(lift(e, src_infos))
		return ITree::IList.new(elems, src_infos)
	elif Builtins::Set.conformed_by(obj):
		elems := []
		for e := obj.iter():
			elems.append(lift(e, src_infos))
		return ITree::ISet.new(elems, src_infos)
	elif Builtins::Dict.conformed_by(obj):
		elems := []
		for key, val := obj.iter():
			elems.append([lift(key, src_infos), lift(val, src_infos)])
		return ITree::IDict.new(elems, src_infos)
	else:
		raise Exceptions::Exception.new(Strings::format("Don't know how to lift instance of '%s': '%s'.", obj.instance_of.name, obj.to_str()))
