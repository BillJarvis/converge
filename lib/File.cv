// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import POSIX_File, Strings, Sys



DIRECTORY_SEPARATOR := "/"
EXTENSION_SEPARATOR := "."




File := POSIX_File::File



////////////////////////////////////////////////////////////////////////////////////////////////////
// Opening / manipulating file objects
//

func open(path, mode):

	return File.new(path, mode)



////////////////////////////////////////////////////////////////////////////////////////////////////
// Examining / testing file properties
//

func dir_entries(path):

	return POSIX_File::dir_entries(path)



func exists(path):

	return POSIX_File::exists(path)



func is_dir(path):

	return POSIX_File::is_dir(path)



func is_file(path):

	return POSIX_File::is_file(path)



////////////////////////////////////////////////////////////////////////////////////////////////////
// Temporary files
//

func temp_name():

	return POSIX_File::temp_name()



////////////////////////////////////////////////////////////////////////////////////////////////////
// File name manipulation
//

func split_leaf(path):

	if i := path.rfind_index(DIRECTORY_SEPARATOR):
		return [path[ : i], path[i + 1 : ]]
	else:
		return ["", path]



func split_ext(path):

	if i := path.rfind_index(EXTENSION_SEPARATOR):
		return [path[ : i], path[i + 1 : ]]
	else:
		return [path, ""]
	


func split_dirs(path):

	return Strings::split(path, DIRECTORY_SEPARATOR)



func join_names(*names):

	flattened := []
	for name := names.iterate():
		while name.suffixed_by(DIRECTORY_SEPARATOR):
			name := name[ : name.len() - DIRECTORY_SEPARATOR.len()]
		flattened.append(name)

	return Strings::join(flattened, DIRECTORY_SEPARATOR)



func join_ext(path, ext):

	return path + EXTENSION_SEPARATOR + ext



func canon_path(path):

	return POSIX_File::canon_path(path)



//func main():
//
//	Sys::println(split_leaf("a/b/c"))
//	Sys::println(split_leaf("abc"))
//	Sys::println(split_dirs("a/b/c"))
//	Sys::println(split_ext("a/b/c.cv"))
//	Sys::println(split_ext("a/b/c"))
