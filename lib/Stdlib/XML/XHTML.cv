// Copyright (c) 2007 Laurence Tratt <laurie@tratt.net>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import CEI, Builtins, Strings
import Nodes




ELEMS := ["a", "abbr", "access", "action", "address", "blockcode", "blockquote", "body", "br", "caption", "cite", "code", "col", "colgroup", "dd", "delete", "dfn", "di", "dispatch", "div", "dl", "dt", "em", "group", "h1", "h2", "h3", "h4", "h5", "h6", "handler", "head", "heading", "html", "img", "input", "insert", "kbd", "l", "label", "li", "link", "load", "message", "meta", "model", "nl", "object", "ol", "output", "p", "param", "pre", "quote", "range", "rebuild", "recalculate", "refresh", "repeat", "reset", "revalidate", "samp", "secret", "section", "select1", "select", "send", "separator", "setfocus", "setindex", "setvalue", "span", "standby", "strong", "style", "sub", "submit", "summary", "sup", "switch", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "title", "tr", "trigger", "ul", "upload", "var"]



//
// Escapes illegal characters in 's' with XHTML entities.
//

func escape_str(s):

    s := s.replaced("&", "&amp;")
    s := s.replaced("<", "&lt;")
    s := s.replaced(">", "&gt;")
    s := s.replaced("'", "&apos;")
    s := s.replaced("\"", "&quot;")

    return s



//
// Converts a dictionary of (name, val) pairs into a list of Nodes::Attr instances.
//

func _conv_attrs(attrs):

    xml_attrs := []

    for name, val := attrs.iter():
        xml_attrs.append(Nodes::Attr.new(name, val))
    
    return xml_attrs



//
// Generate all the HTML creating functions.
//

$c<func (){

    funcs := []
    for elem := ELEMS.iter():
        func_ := [|
            func $c{CEI::ivar(elem)}(children := [], attrs := Dict{}):

                elem := Nodes::Elem.new(${CEI::istring(elem)}, _conv_attrs(attrs))
                elem.extend(children)

                return elem
        |]
        funcs.append(func_)
    
    return funcs
}()>
