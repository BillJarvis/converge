// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Builtins, Strings, Sys




class Non_Term:

    func init(self, name, children, src_infos):
    
        self.name := name
        self.children := children
        self.src_infos := src_infos



    func to_str(self):
    
        return pp_tree(self)



    func get(self, i):
    
        return self.children[i]



    func get_slice(self, i, j):
    
        return self.children[i : j]



    func len(self):
    
        return self.children.len()


    func iter(self, i := 0):
    
        for yield self.children.iter(i)
        
        return fail




_INDENT := "  "

//
// Given a parse_tree as a list, return a pretty printed string representing the parse tree.
//

func pp_tree(list, indent_level := 0):

    output := [list.name]
    output.append(" " + list.src_infos.to_str())
    for elem := list.iter(0):
        output.append("\n")
        output.append(_INDENT * (indent_level + 1))
        output.append("-> ")
        if Non_Term.instantiated(elem):
            output.append(pp_tree(elem, indent_level + 1))
        else:
            if elem.value is null:
                output.extend(["<", elem.type, ">"])
            else:
                output.extend(["<", elem.type, " ", elem.value, ">"])
            output.append(" " + elem.src_infos.to_str())
        
    return Strings::join(output, "")
