// Copyright (c) 2011 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Builtins, Exceptions, Sys



func test_simple_add_field():
    class C:
        pass

    c := C.new()
    C.set_field("x", 1)
    assert c.x == 1


func test_nested_add_field():
    class B:
        pass

    class C(B):
        pass

    c := C.new()
    B.set_field("x", 1)
    assert c.x == 1


func main():

    // We want to check that the JIT handles nested adding of fields, so we embed everything in a
    // sufficiently long loop that we can be sure that the JIT is operating.

    i := 0
    while i < 100000:
        test_simple_add_field()
        i += 1

    i := 0
    while i < 100000:
        test_nested_add_field()
        i += 1