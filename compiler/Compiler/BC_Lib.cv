// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Array, File, Sys
import BC_Mod, BC_Pkg




//

LIBRARY_INIT_STRING := "CONVLIBR"
LIBRARY_VERSION := 0





class BC_Lib:

	func init(self, target):
	
		self._target := target



	func deserialize(self, mod_str):
	
		library := Array::Array.new(self._target.ARRAY_TYPE, mod_str)
	
		self.modules := []
		for i := 0.iter_to(library[self._target.LIBRARY_BYTECODE_NUM_MODULES]):
			mod_offset := library[self._target.LIBRARY_BYTECODE_MODULE_OFFSETS + i] / self._target.WORDSIZE
			
			assert BC_Mod::MOD_INIT_STR.len() == BC_Pkg::PKG_INIT_STR.len()
			
			mod_header := mod_str[mod_offset * self._target.WORDSIZE : mod_offset * self._target.WORDSIZE + BC_Mod::MOD_INIT_STR.len()]
			
			ndif mod_header == BC_Mod::MOD_INIT_STR:
				to := mod_offset + library[mod_offset + self._target.MODULE_BYTECODE_SIZE] / self._target.WORDSIZE
				bc_mod := BC_Mod::BC_Mod.new(self._target)
				bc_mod.deserialize_str(mod_str[mod_offset * self._target.WORDSIZE : to * self._target.WORDSIZE])
			elif mod_header == BC_Pkg::PKG_INIT_STR:
				to := mod_offset + library[mod_offset + self._target.PKG_BYTECODE_SIZE] / self._target.WORDSIZE
				bc_mod := BC_Pkg::BC_Pkg.new(self._target)
				bc_mod.deserialize_str(mod_str[mod_offset * self._target.WORDSIZE : to * self._target.WORDSIZE])
				
			self.modules.append(bc_mod)
		
		return self.modules



	func serialize(self):
	
		library := Array::Array.new(self._target.ARRAY_TYPE)
		library.extend_from_string(LIBRARY_INIT_STRING)
		library.append(LIBRARY_VERSION)

		library.append(self.modules.len())
		library.append(-1) // Offset to modules offsets
		
		library[self._target.LIBRARY_BYTECODE_MODULE_OFFSETS] := library.len_bytes()
		
		serialized_modules := Array::Array.new(self._target.ARRAY_TYPE)
		for module := self.modules.iter():
			library.append(library.len_bytes() + serialized_modules.len_bytes())
			serialized_modules.extend_from_string(module.serialize())
		
		library.extend(serialized_modules)
		
		return library
