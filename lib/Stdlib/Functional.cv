// Copyright (c) 2003-2006 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Exceptions, Sys




func map(func_, list):

    new_list := []
    for elem := list.iter():
        if not mapped := func_(elem):
            raise Exceptions::Exception("Function passed to 'map' did not return an element.")
        new_list.append(mapped)
    
    return new_list



func foldl(func_, list, initializer := null):

    if list.len() == 0 & initializer is null:
        raise Exceptions::Exception("foldl passed an empty list and no initializer.")
    elif list.len() == 0:
        return initializer

    if list.len() == 1:
        return list[0]

    if not initializer is null:
        accumulator := initializer
        i := 0
    else:
        accumulator := func_(list[0], list[1])
        i := 2
    while i < list.len():
        if not accumulator := func_(accumulator, list[i]):
            raise Exceptions::Exception("Function passed to foldl did not return an element.")
        i += 1

    return accumulator
