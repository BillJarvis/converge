// Copyright (c) 2007 King's College London, created by Laurence Tratt
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


import Exceptions, Strings, Sys
import Compiler::Core, Compiler::Eval





//
// We use this "dummy" exception to signify to the interactive compiler that an error condition has
// occurred, but we don't want to print out a backtrace. This is a nice hack.
//

class _Dummy_Exception(Exceptions::Exception):
    pass




class _Interactive_Compiler(Eval::Eval_Compiler):

    func error(self, msg, src_infos := null):
    
        self._print_msg("Error", msg, src_infos)
        
        raise _Dummy_Exception.new()



    func warning(self, msg, src_infos := null):
    
        self._print_msg("Warning", msg, src_infos)
    
    
    
    func _print_msg(self, pre_msg, msg, src_infos := null):

        Sys::stderr.writeln(Strings::format("%s: %s", pre_msg, msg))
        Sys::stderr.flush()




func main():

    includes := Core::find_std_includes()

    Sys::println("Converge ", Sys::version, " (built at ", Sys::version_date, ")")
    d := Dict{}
    while 1:
        Sys::print(">>> ")
        input := []
        while 1:
            Sys::stdout.flush()
            if not (line := Sys::stdin.readln()):
                Sys::exit(0)

            input.append(line)
            st_line := line.stripped()
            
            if st_line == "":
                break
            
            if input.len() == 1 & not (st_line[-1] == ":" | st_line[-1] == "\\"):
                break
            
            Sys::print("... ")

        input := Strings::join(input, "\n")
        if input.stripped() == "":
            continue

        try:
            compiler := _Interactive_Compiler.new(input, d, includes)
            Core::push_compiler(compiler)
            if rtn := compiler.eval():
                Sys::println(rtn)
            Core::pop_compiler()
        catch _Dummy_Exception into e:
            pass
        catch Exceptions::System_Exit_Exception into e:
            Sys::exit(e.code)
        catch Exceptions::Exception into e:
            Sys::stderr.writeln(Exceptions::backtrace(e))
            Sys::stderr.flush()
